{"version":3,"file":"static/js/8237.e857e562.chunk.js","mappings":"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","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-breadcrumb-group/ic-breadcrumb-group.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-breadcrumb-group/ic-breadcrumb-group.css?tag=ic-breadcrumb-group&encapsulation=shadow"],"sourcesContent":["import { Component, Host, h, Element, Prop, State } from \"@stencil/core\";\nimport {\n  checkResizeObserver,\n  DEVICE_SIZES,\n  getCurrentDeviceSize,\n} from \"../../utils/helpers\";\n\n@Component({\n  tag: \"ic-breadcrumb-group\",\n  styleUrl: \"ic-breadcrumb-group.css\",\n  shadow: true,\n})\n\n// Added ResizeObserver to find out width of breadcrumbs and parents. Use side navigation long title for ref.\nexport class BreadcrumbGroup {\n  private ADD_CLASS_DELAY = 50;\n  private breadcrumb: HTMLIcBreadcrumbElement;\n  private breadcrumbs: HTMLIcBreadcrumbElement[];\n  private collapsedBreadcrumbEl: HTMLButtonElement;\n  private collapsedBreadcrumbs: HTMLIcBreadcrumbElement[];\n  private collapsedBreadcrumbWrapper: HTMLIcBreadcrumbElement;\n  private IC_BREADCRUMB: string = \"ic-breadcrumb\";\n  private resizeObserver: ResizeObserver = null;\n  private SHOW_BACK_ICON: string = \"show-back-icon\";\n\n  @Element() el: HTMLIcBreadcrumbGroupElement;\n\n  @State() deviceSize: number = DEVICE_SIZES.XL;\n  @State() expandedBreadcrumbs: boolean = false;\n\n  /**\n   * If `true`, display only a single breadcrumb for the parent page with a back icon.\n   */\n  @Prop() backBreadcrumbOnly: boolean = false;\n  /**\n   * If `true`, all breadcrumbs between the first and last breadcrumb will be collapsed.\n   */\n  @Prop() collapsed: boolean = false;\n\n  componentWillLoad(): void {\n    const allBreadcrumbs = Array.from(\n      this.el.querySelectorAll(this.IC_BREADCRUMB)\n    );\n\n    if (this.backBreadcrumbOnly) {\n      this.setBackBreadcrumb();\n    } else {\n      checkResizeObserver(this.runResizeObserver);\n    }\n\n    if (this.collapsed) {\n      this.collapsedBreadcrumbWrapper = this.renderCollapsedBreadcrumb();\n\n      if (allBreadcrumbs.length > 2) {\n        if (getCurrentDeviceSize() === DEVICE_SIZES.S) {\n          this.setLastParentCollapsedBackBreadcrumb();\n        } else {\n          this.setCollapsed();\n        }\n      }\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.breadcrumb.removeEventListener(\n      \"transitionend\",\n      this.transitionendHandler\n    );\n    this.collapsedBreadcrumbEl.removeEventListener(\"click\", this.clickHandler);\n  }\n\n  private setBackBreadcrumb = () => {\n    if (this.backBreadcrumbOnly) {\n      this.setBackBreadcrumbAttr();\n    }\n  };\n\n  private setBackBreadcrumbAttr = () => {\n    if (this.lastParentBreadcrumb) {\n      this.lastParentBreadcrumb.classList.add(\"show\");\n      this.lastParentBreadcrumb.setAttribute(this.SHOW_BACK_ICON, \"true\");\n    }\n  };\n\n  private getLastParentBreadcrumb = (): HTMLIcBreadcrumbElement | null => {\n    const allBreadcrumbs: HTMLIcBreadcrumbElement[] = Array.from(\n      this.el.querySelectorAll(this.IC_BREADCRUMB)\n    );\n\n    if (allBreadcrumbs.length === 1) {\n      return null;\n    }\n\n    this.breadcrumbs = allBreadcrumbs.filter(\n      (breadcrumb) => !breadcrumb.getAttribute(\"current\")\n    );\n    this.breadcrumb = this.breadcrumbs[this.breadcrumbs.length - 1];\n\n    return this.breadcrumb;\n  };\n\n  private lastParentBreadcrumb = this.getLastParentBreadcrumb();\n\n  private setDefaultBreadcrumbs = () => {\n    const allBreadcrumbs = Array.from(\n      this.el.querySelectorAll(this.IC_BREADCRUMB)\n    );\n    allBreadcrumbs.forEach((breadcrumb) => {\n      breadcrumb.setAttribute(this.SHOW_BACK_ICON, \"false\");\n    });\n  };\n\n  private setCollapsed = () => {\n    if (this.collapsed) {\n      const allBreadcrumbs: HTMLIcBreadcrumbElement[] = Array.from(\n        this.el.querySelectorAll(this.IC_BREADCRUMB)\n      );\n      this.collapsedBreadcrumbs = allBreadcrumbs\n        .splice(1, allBreadcrumbs.length - 2)\n        .filter(\n          (breadcrumb) =>\n            !breadcrumb.classList.contains(\"collapsed-breadcrumb-wrapper\")\n        );\n\n      this.collapsedBreadcrumbs.forEach((breadcrumb) =>\n        breadcrumb.classList.add(\"hide\")\n      );\n\n      const firstBreadcrumb = allBreadcrumbs[0];\n\n      if (firstBreadcrumb) {\n        firstBreadcrumb.insertAdjacentElement(\n          \"afterend\",\n          this.collapsedBreadcrumbWrapper\n        );\n      }\n    }\n  };\n\n  private clickHandler = () => {\n    this.handleHiddenCollapsedBreadcrumbs(this.collapsedBreadcrumbWrapper);\n  };\n\n  private renderCollapsedBreadcrumb = () => {\n    this.collapsedBreadcrumbWrapper = document.createElement(\"ic-breadcrumb\");\n    this.collapsedBreadcrumbWrapper.classList.add(\n      \"collapsed-breadcrumb-wrapper\"\n    );\n    this.collapsedBreadcrumbEl = document.createElement(\"button\");\n\n    const ariaLabel = document.createElement(\"span\");\n    ariaLabel.id = \"collapsed-button-label\";\n    ariaLabel.innerText = \"Collapsed breadcrumbs\";\n    ariaLabel.className = \"hide\";\n    this.collapsedBreadcrumbEl.setAttribute(\n      \"aria-labelledby\",\n      \"collapsed-button-label\"\n    );\n\n    const ariaDescribed = document.createElement(\"span\");\n    ariaDescribed.id = \"collapsed-button-described\";\n    ariaDescribed.innerText = \"Select to view collapsed breadcrumbs\";\n    ariaDescribed.className = \"hide\";\n    this.collapsedBreadcrumbEl.setAttribute(\n      \"aria-describedby\",\n      \"collapsed-button-described\"\n    );\n\n    this.collapsedBreadcrumbEl.id = \"collapsed-ellipsis\";\n    this.collapsedBreadcrumbEl.innerText = \"...\";\n    this.collapsedBreadcrumbEl.classList.add(\"collapsed-breadcrumb\");\n    this.collapsedBreadcrumbEl.addEventListener(\"click\", this.clickHandler);\n\n    this.collapsedBreadcrumbWrapper.append(ariaDescribed);\n    this.collapsedBreadcrumbWrapper.append(ariaLabel);\n    this.collapsedBreadcrumbWrapper.append(this.collapsedBreadcrumbEl);\n\n    return this.collapsedBreadcrumbWrapper;\n  };\n\n  private handleHiddenCollapsedBreadcrumbs = (\n    collapsedBreadcrumbWrapper: HTMLIcBreadcrumbElement\n  ) => {\n    collapsedBreadcrumbWrapper.remove();\n    this.collapsedBreadcrumbs.forEach((breadcrumb) => {\n      breadcrumb.classList.add(\"visuallyhidden\");\n      breadcrumb.classList.remove(\"hide\");\n      setTimeout(() => {\n        breadcrumb.classList.add(\"fade\");\n      }, this.ADD_CLASS_DELAY);\n\n      this.removeVisuallyHiddenClass(breadcrumb);\n    });\n    this.expandedBreadcrumbs = true;\n  };\n\n  private transitionendHandler = (event: TransitionEvent) => {\n    if (event.propertyName === \"opacity\") {\n      (event.target as HTMLElement).classList.remove(\"visuallyhidden\");\n    }\n  };\n\n  private removeVisuallyHiddenClass = (breadcrumb: HTMLIcBreadcrumbElement) => {\n    breadcrumb.addEventListener(\"transitionend\", this.transitionendHandler);\n  };\n\n  private setLastParentCollapsedBackBreadcrumb = () => {\n    this.setBackBreadcrumbAttr();\n    this.lastParentBreadcrumb.classList.remove(\"hide\");\n  };\n\n  private revertLastParentCollapsedBreadcrumb = () => {\n    this.lastParentBreadcrumb.setAttribute(this.SHOW_BACK_ICON, \"false\");\n  };\n\n  private resizeObserverCallback = (currSize: number) => {\n    if (currSize !== this.deviceSize) {\n      this.deviceSize = currSize;\n\n      if (this.deviceSize <= DEVICE_SIZES.S) {\n        this.el.setAttribute(\"back-breadcrumb-only\", \"true\");\n        if (this.collapsed) {\n          this.setLastParentCollapsedBackBreadcrumb();\n        } else {\n          this.setBackBreadcrumb();\n        }\n      } else {\n        this.el.setAttribute(\"back-breadcrumb-only\", \"false\");\n        if (this.collapsed && this.breadcrumbs && this.breadcrumbs.length > 2) {\n          this.revertLastParentCollapsedBreadcrumb();\n          if (this.expandedBreadcrumbs) {\n            this.setDefaultBreadcrumbs();\n          } else {\n            this.setCollapsed();\n          }\n        } else {\n          this.setDefaultBreadcrumbs();\n        }\n      }\n    }\n  };\n\n  private runResizeObserver = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      const currSize = getCurrentDeviceSize();\n      this.resizeObserverCallback(currSize);\n    });\n\n    this.resizeObserver.observe(this.el);\n  };\n\n  render() {\n    return (\n      <Host\n        class={{\n          back: this.backBreadcrumbOnly,\n          collapsed: this.collapsed,\n        }}\n      >\n        <nav aria-label=\"breadcrumbs\">\n          <ol>\n            <slot />\n          </ol>\n        </nav>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n:host ol {\n  display: flex;\n  list-style-type: none;\n  align-items: center;\n  flex-wrap: wrap;\n  padding: 0;\n  margin: 0;\n}\n\n:host(.back) ol ::slotted(ic-breadcrumb) {\n  display: none;\n}\n\n:host(.back) ol ::slotted(ic-breadcrumb.show) {\n  display: flex;\n}\n\n:host(.collapsed) ol ::slotted(ic-breadcrumb.hide) {\n  display: none;\n  opacity: 0;\n  visibility: hidden;\n}\n\n:host(.collapsed) ol ::slotted(ic-breadcrumb.visuallyhidden) {\n  display: block;\n  opacity: 0;\n  transition: all var(--ic-easing-transition-slow);\n}\n\n:host(.collapsed) ol ::slotted(ic-breadcrumb.fade) {\n  opacity: 1;\n}\n"],"names":["BreadcrumbGroup","ADD_CLASS_DELAY","IC_BREADCRUMB","resizeObserver","SHOW_BACK_ICON","setBackBreadcrumb","_this","backBreadcrumbOnly","setBackBreadcrumbAttr","lastParentBreadcrumb","classList","add","setAttribute","getLastParentBreadcrumb","allBreadcrumbs","Array","from","el","querySelectorAll","length","breadcrumbs","filter","breadcrumb","getAttribute","this","setDefaultBreadcrumbs","forEach","setCollapsed","collapsed","collapsedBreadcrumbs","splice","contains","firstBreadcrumb","insertAdjacentElement","collapsedBreadcrumbWrapper","clickHandler","handleHiddenCollapsedBreadcrumbs","renderCollapsedBreadcrumb","document","createElement","collapsedBreadcrumbEl","ariaLabel","id","innerText","className","ariaDescribed","addEventListener","append","remove","setTimeout","removeVisuallyHiddenClass","expandedBreadcrumbs","transitionendHandler","event","propertyName","target","setLastParentCollapsedBackBreadcrumb","revertLastParentCollapsedBreadcrumb","resizeObserverCallback","currSize","deviceSize","DEVICE_SIZES","S","runResizeObserver","ResizeObserver","getCurrentDeviceSize","observe","XL","checkResizeObserver","key","value","removeEventListener","h","Host","class","back","get"],"sourceRoot":""}