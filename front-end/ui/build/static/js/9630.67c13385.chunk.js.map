{"version":3,"file":"static/js/9630.67c13385.chunk.js","mappings":"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","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-radio-option/ic-radio-option.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-radio-option/ic-radio-option.css?tag=ic-radio-option&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Host,\n  h,\n  Prop,\n  Element,\n  Event,\n  EventEmitter,\n  Listen,\n  State,\n  Method,\n  Watch,\n} from \"@stencil/core\";\nimport { IcAdditionalFieldTypes, IcValueEventDetail } from \"../../utils/types\";\nimport {\n  getSlotContent,\n  onComponentRequiredPropUndefined,\n  addFormResetListener,\n  removeFormResetListener,\n  removeDisabledFalse,\n} from \"../../utils/helpers\";\n@Component({\n  tag: \"ic-radio-option\",\n  styleUrl: \"ic-radio-option.css\",\n  shadow: {\n    delegatesFocus: true,\n  },\n})\nexport class RadioOption {\n  private defaultRadioValue: string = \"\";\n  private hasAdditionalField: boolean = false;\n  private radioElement: HTMLInputElement;\n  private skipFocus = false;\n\n  @Element() host: HTMLIcRadioOptionElement;\n\n  /**\n   * The style of additionalField that will be displayed if used.\n   */\n  @Prop({ reflect: true }) additionalFieldDisplay: IcAdditionalFieldTypes =\n    \"static\";\n\n  /**\n   * If `true`, the disabled state will be set.\n   */\n  @Prop() disabled?: boolean = false;\n\n  /**\n   * The text to be displayed when dynamic.\n   */\n  @Prop() dynamicText: string = \"This selection requires additional answers\";\n\n  /**\n   * The group label for the radio option.\n   */\n  @Prop() groupLabel: string;\n\n  /**\n   * The label for the radio option.\n   */\n  @Prop() label?: string;\n\n  /**\n   * The name for the radio option.\n   */\n  @Prop() name: string;\n\n  /**\n   * The value for the radio option.\n   */\n  @Prop({ mutable: true }) value!: string;\n\n  /**\n   * If `true`, the radio option will be displayed in a selected state.\n   */\n  @Prop({ reflect: true, mutable: true }) selected?: boolean = false;\n  @State() initiallySelected = this.selected;\n\n  @Watch(\"selected\")\n  watchSelectedHandler(): void {\n    this.icSelectedChange.emit();\n  }\n\n  /**\n   * Emitted when the radio option is selected.\n   */\n  @Event() icCheck: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * @deprecated This event should not be used anymore. Use icCheck instead.\n   */\n  @Event() radioOptionSelect: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when the radio option is selected or deselected.\n   */\n  @Event() icSelectedChange: EventEmitter<void>;\n\n  disconnectedCallback(): void {\n    removeFormResetListener(this.host, this.handleFormReset);\n  }\n\n  componentWillLoad(): void {\n    const additonalFieldContent = getSlotContent(this.host, \"additional-field\");\n\n    if (additonalFieldContent !== null) {\n      this.hasAdditionalField = true;\n      const Element = additonalFieldContent[0] as HTMLElement;\n      if (Element.tagName === \"IC-TEXT-FIELD\") {\n        const textField = Element as HTMLIcTextFieldElement;\n        textField.hiddenInput = false;\n      }\n    }\n\n    this.defaultRadioValue = this.value;\n\n    addFormResetListener(this.host, this.handleFormReset);\n\n    removeDisabledFalse(this.disabled, this.host);\n  }\n\n  componentDidLoad(): void {\n    onComponentRequiredPropUndefined(\n      [{ prop: this.value, propName: \"value\" }],\n      \"Radio Option\"\n    );\n  }\n\n  componentDidRender(): void {\n    if (this.additionalFieldDisplay === \"static\") {\n      const textfield = this.host.querySelector(\"ic-text-field\");\n      if (!this.selected) {\n        textfield && textfield.setAttribute(\"disabled\", \"\");\n      } else {\n        textfield && textfield.removeAttribute(\"disabled\");\n      }\n    }\n  }\n\n  @Listen(\"icChange\")\n  textfieldValueHandler(event: CustomEvent<{ value: string }>): void {\n    const textFieldValue = event.detail.value;\n\n    if (this.selected) {\n      if (textFieldValue !== \"\") {\n        this.value = event.detail.value;\n        this.icCheck.emit({\n          value: this.value,\n        });\n        this.radioOptionSelect.emit({\n          value: this.value,\n        });\n      } else {\n        this.value = this.defaultRadioValue;\n        this.icCheck.emit({\n          value: this.defaultRadioValue,\n        });\n        this.radioOptionSelect.emit({\n          value: this.defaultRadioValue,\n        });\n      }\n    }\n\n    event.stopImmediatePropagation();\n  }\n\n  /**\n   * Sets focus on the radio option.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    if (this.host.shadowRoot.querySelector(\"input\")) {\n      this.host.shadowRoot.querySelector(\"input\").focus();\n    }\n  }\n\n  private handleClick = () => {\n    if (!this.disabled) {\n      if (this.skipFocus === false) {\n        this.radioElement.focus();\n      }\n      this.skipFocus = false;\n\n      if (this.hasAdditionalField) {\n        const textfield = this.host.querySelector(\"ic-text-field\");\n        this.value =\n          textfield.value !== \"\" ? textfield.value : this.defaultRadioValue;\n      }\n\n      this.icCheck.emit({\n        value: this.value,\n      });\n\n      this.radioOptionSelect.emit({\n        value: this.value,\n      });\n    }\n  };\n\n  private swallowClick = (event: MouseEvent) => {\n    event.stopPropagation();\n  };\n\n  private handleFormReset = (): void => {\n    this.skipFocus = true;\n    this.selected = this.initiallySelected;\n  };\n\n  render() {\n    const id = `ic-radio-option-${\n      this.label !== undefined ? this.label : this.value\n    }-${this.groupLabel}`;\n\n    return (\n      <Host onClick={this.handleClick} class={{ disabled: this.disabled }}>\n        <div class={{ [\"container\"]: true, [\"disabled\"]: this.disabled }}>\n          <div>\n            <input\n              role=\"radio\"\n              tabindex={this.selected ? \"0\" : \"-1\"}\n              type=\"radio\"\n              name={this.name}\n              id={id}\n              value={this.value}\n              disabled={this.disabled ? true : null}\n              checked={this.selected}\n              ref={(el) => (this.radioElement = el)}\n            ></input>\n            <span class=\"checkmark\"></span>\n          </div>\n          <ic-typography class=\"radio-label\" variant=\"body\">\n            <label htmlFor={id}>{this.label}</label>\n          </ic-typography>\n        </div>\n\n        {this.hasAdditionalField && (\n          <div\n            onClick={this.swallowClick}\n            class={{\n              \"dynamic-container\": true,\n              hidden:\n                this.additionalFieldDisplay === \"dynamic\" && !this.selected,\n            }}\n          >\n            {this.additionalFieldDisplay === \"dynamic\" && (\n              <div class=\"branch-corner\"></div>\n            )}\n            <div>\n              {this.additionalFieldDisplay === \"dynamic\" && (\n                <ic-typography variant=\"caption\">\n                  <p class=\"dynamic-text\">{this.dynamicText}</p>\n                </ic-typography>\n              )}\n              <div\n                class={{\n                  \"additional-field-wrapper\":\n                    this.additionalFieldDisplay === \"static\",\n                }}\n              >\n                <slot name=\"additional-field\"></slot>\n              </div>\n            </div>\n          </div>\n        )}\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  display: flex;\n  flex-direction: column;\n  width: fit-content;\n}\n\n:host([additional-field-display=\"static\"]) ::slotted(ic-text-field) {\n  margin-top: calc(var(--ic-space-sm) / 2);\n  margin-left: var(--ic-space-xl);\n}\n\n/* The label turns grey when disabled  */\n:host(.disabled) {\n  color: var(--ic-architectural-200);\n}\n\n/* Focus states */\n\n.container input:focus + span.checkmark,\n:host(:focus) .container input:checked + span.checkmark {\n  box-shadow: var(--ic-border-focus);\n}\n\n/* The container */\n.container {\n  display: grid;\n  grid-template-columns: min-content auto;\n  position: relative;\n  cursor: pointer;\n  align-items: center;\n  margin: var(--ic-space-xxs) 0 var(--ic-space-xxs) var(--ic-space-xxs);\n}\n\n.container.disabled,\n.container.disabled input:disabled {\n  cursor: default;\n}\n\n/* Hide the browser's default radio button */\n.container input {\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n  display: inline-block;\n  position: absolute;\n  cursor: pointer;\n  height: var(--ic-space-lg);\n  width: var(--ic-space-lg);\n  border-radius: 50%;\n  border: none;\n}\n\n/* Create a custom radio button */\n.checkmark {\n  display: block;\n  position: relative;\n  top: 0;\n  left: 0;\n  height: var(--ic-space-lg);\n  width: var(--ic-space-lg);\n  background-color: transparent;\n  border: var(--ic-border-default);\n  border-radius: 50%;\n  transition: var(--ic-easing-transition-fast);\n  box-sizing: border-box;\n}\n\n/* Show the indicator (dot/circle) when checked */\n.container input:checked ~ .checkmark::after {\n  display: inline-block;\n}\n\n/* On mouse-over, add a light blue background color */\n.container:hover input ~ .checkmark {\n  background-color: var(--ic-action-default-bg-hover);\n  box-shadow: 0 0 0 0.25rem var(--ic-action-default-bg-hover);\n  border: var(--ic-space-1px) solid var(--ic-action-default);\n}\n\n/* When pressed, adds the active colours */\n.container:active input ~ .checkmark {\n  background-color: var(--ic-action-default-bg-active);\n  border: var(--ic-space-1px) solid var(--ic-action-default-active);\n  box-shadow: 0 0 0 0.25rem var(--ic-action-default-bg-active);\n}\n\n/* When pressed, adds the active colours */\n.container:active input:checked ~ .checkmark {\n  background-color: var(--ic-action-default-bg-active);\n  border: 0.125rem solid var(--ic-action-default-active);\n  box-shadow: 0 0 0 0.25rem var(--ic-action-default-bg-active);\n}\n\n/* When pressed and selected, adds the active colours */\n.container:active input:checked ~ .checkmark::after {\n  background-color: var(--ic-action-default-active);\n}\n\n/* When the radio button is checked */\n.container input:checked ~ .checkmark {\n  border: 0.125rem solid var(--ic-action-default);\n}\n\n/* When the radio button is checked and disabled */\n.container input:checked:disabled ~ .checkmark {\n  background-color: transparent;\n  border: 0.125rem solid var(--ic-architectural-200);\n}\n\n/* When the radio button is disabled */\n.container input:disabled ~ .checkmark {\n  border: var(--ic-space-1px) dashed var(--ic-architectural-200);\n}\n\n/* When the radio button is disabled */\n.container input:disabled ~ .checkmark::after {\n  background: var(--ic-architectural-200);\n}\n\n/* On mouse-over inactive */\n.container:hover input:disabled ~ .checkmark {\n  background-color: transparent;\n  box-shadow: none;\n  border: 0.125rem solid none;\n}\n\n.container:active input:disabled ~ .checkmark::after {\n  background-color: var(--ic-architectural-200);\n}\n\n/* Style the indicator (dot/circle) */\n.container .checkmark::after {\n  content: \"\";\n  position: absolute;\n  display: none;\n  top: calc(50% - var(--ic-space-xs));\n  left: calc(50% - var(--ic-space-xs));\n  width: var(--ic-space-md);\n  height: var(--ic-space-md);\n  border-radius: 50%;\n  background: var(--ic-action-default);\n}\n\n.radio-label {\n  margin-left: var(--ic-space-md);\n}\n\n.additional-field-wrapper {\n  margin-left: var(--ic-space-xs);\n}\n\n/* The line */\n.branch-corner {\n  color: var(--ic-action-default);\n  height: var(--ic-space-md);\n  width: var(--ic-space-xl);\n  border-radius: 0 0 0 0.188rem;\n  border-bottom: 0.125rem solid var(--ic-action-default);\n  border-left: 0.125rem solid var(--ic-action-default);\n  margin-left: calc(-1 * var(--ic-space-1px));\n}\n\n/* The dynamic container */\n.dynamic-container {\n  display: flex;\n  position: relative;\n  margin: var(--ic-space-xxxs) 0 var(--ic-space-xxs) var(--ic-space-md);\n  gap: var(--ic-space-xs);\n}\n\n.dynamic-container.hidden {\n  display: none;\n}\n\n.dynamic-text {\n  color: var(--ic-action-default);\n  margin-top: calc(var(--ic-space-sm) / 2);\n  margin-bottom: var(--ic-space-xs);\n  border-radius: 2%;\n}\n\n@media (max-width: 576px) {\n  ::slotted(ic-text-field) {\n    --input-width: 100%;\n  }\n}\n\n@media (forced-colors: active) {\n  /* Styles here only apply to Forced Colors Mode */\n\n  .container input:checked ~ .checkmark,\n  .container:active input:checked ~ .checkmark {\n    border-color: Highlight;\n  }\n\n  .container input:checked ~ .checkmark::after,\n  .container:active input:checked ~ .checkmark::after {\n    background-color: Highlight;\n  }\n\n  .container input:disabled ~ .checkmark,\n  .container input:checked:disabled ~ .checkmark {\n    border-color: GrayText;\n  }\n\n  .container input:disabled ~ .checkmark::after,\n  .container:active input:disabled ~ .checkmark::after {\n    background-color: GrayText;\n  }\n}\n"],"names":["RadioOption","defaultRadioValue","hasAdditionalField","skipFocus","handleClick","_this","disabled","radioElement","focus","textfield","host","querySelector","value","icCheck","emit","radioOptionSelect","swallowClick","event","stopPropagation","handleFormReset","selected","initiallySelected","this","icSelectedChange","key","removeFormResetListener","additonalFieldContent","getSlotContent","Element","tagName","hiddenInput","addFormResetListener","removeDisabledFalse","onComponentRequiredPropUndefined","prop","propName","additionalFieldDisplay","removeAttribute","setAttribute","textFieldValue","detail","stopImmediatePropagation","_callee","_regeneratorRuntime","wrap","_context","prev","next","shadowRoot","stop","_setFocus","apply","arguments","_class","_this2","id","concat","undefined","label","groupLabel","h","Host","onClick","class","_defineProperty","role","tabindex","type","name","checked","ref","el","variant","htmlFor","hidden","dynamicText","get"],"sourceRoot":""}