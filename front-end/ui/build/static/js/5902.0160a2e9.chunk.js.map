{"version":3,"file":"static/js/5902.0160a2e9.chunk.js","mappings":"yMAIaA,EAAW,WADxB,SAAAA,EAAAC,IAAAC,EAAAA,EAAAA,GAAA,KAAAF,I,eAEU,KAAAG,kBAA0C,E,QAqCnDC,EAAAA,EAAAA,GAAAJ,EAAA,EAAAK,IAAA,uBAAAC,MA/BC,WAAoB,I,EAAAC,EAAA,KACdC,KAAKL,kBAAkBM,OAAS,GAClCD,KAAKL,kBAAkB,GACpBO,aACAC,MAAK,SAACC,GAAG,OAAML,EAAKM,kBAAoBD,CAAG,IAC9CJ,KAAKL,kBAAkBW,SAEnBN,KAAKK,mBAAqB,aAAcL,KAAKK,kBAC9CL,KAAKK,kBAA4CE,WACvB,QAAtBC,EAAAR,KAAKK,yBAAiB,IAAAG,GAAAA,EAAEC,O,oEASnC,SAAAC,EAAiBC,GAAyB,IAAAC,EAAAC,EAAA,YAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,QAIF,KAHhCN,EAAgBO,MAAMC,KAC1BC,SAASC,iBAAiB,aAC1BC,QAAO,SAACC,GAAE,MAA6C,SAAxCC,OAAOC,iBAAiBF,GAAIG,OAAkB,KAC7CC,QAAQjB,IAAiBC,EAAcX,QAAU,GACjEU,EAAMT,aAAaC,MAAK,SAACC,GAAG,OAAMS,EAAKR,kBAAoBD,CAAG,IAE5DQ,EAAcX,OAAS,GAAGD,KAAKL,kBAAkBkC,KAAKlB,GAAO,wBAAAK,EAAAc,OAAA,GAAApB,EAAA,UAClE,gBAAAqB,GAAA,OAAAC,EAAAC,MAAA,KAAAC,UAAA,E,IAAA,CAAArC,IAAA,SAAAC,MAED,WACE,OAAOqC,EAAAA,EAAAA,GAAA,Y,GACR,CAAAtC,IAAA,KAAAuC,IAAA,W,0BArCqB,E","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-toast-region/ic-toast-region.tsx"],"sourcesContent":["import { Component, Element, h, Listen, Method } from \"@stencil/core\";\nimport { IcFocusableComponents } from \"../../utils/types\";\n\n@Component({ tag: \"ic-toast-region\" })\nexport class ToastRegion {\n  private pendingVisibility: HTMLIcToastElement[] = [];\n  private previouslyFocused: HTMLElement;\n\n  @Element() el: HTMLIcToastRegionElement;\n\n  @Listen(\"icDismiss\", { capture: true })\n  handleDismissedToast(): void {\n    if (this.pendingVisibility.length > 0) {\n      this.pendingVisibility[0]\n        .setVisible()\n        .then((res) => (this.previouslyFocused = res));\n      this.pendingVisibility.shift();\n    } else {\n      if (this.previouslyFocused && \"setFocus\" in this.previouslyFocused) {\n        (this.previouslyFocused as IcFocusableComponents).setFocus();\n      } else this.previouslyFocused?.focus();\n    }\n  }\n\n  /**\n   * Handles setting the visibility of various toasts based on what is already visible\n   * @param toast The toast element being requested to display\n   */\n  @Method()\n  async setVisible(toast: HTMLIcToastElement): Promise<void> {\n    const visibleToasts = Array.from(\n      document.querySelectorAll(\"ic-toast\")\n    ).filter((el) => window.getComputedStyle(el).display !== \"none\");\n    if (visibleToasts.indexOf(toast) === -1 && visibleToasts.length <= 0) {\n      toast.setVisible().then((res) => (this.previouslyFocused = res));\n    }\n    if (visibleToasts.length > 0) this.pendingVisibility.push(toast);\n  }\n\n  render() {\n    return <slot></slot>;\n  }\n}\n"],"names":["ToastRegion","hostRef","_classCallCheck","pendingVisibility","_createClass","key","value","_this","this","length","setVisible","then","res","previouslyFocused","shift","setFocus","_a","focus","_callee","toast","visibleToasts","_this2","_regeneratorRuntime","wrap","_context","prev","next","Array","from","document","querySelectorAll","filter","el","window","getComputedStyle","display","indexOf","push","stop","_x","_setVisible","apply","arguments","h","get"],"sourceRoot":""}