{"version":3,"file":"static/js/6857.d8fe03a6.chunk.js","mappings":"2MAyBaA,G,QAAa,W,sGAMI,E,gBAKC,G,gBAKA,E,kDAeD,E,UAKH,U,YAKA,E,sBAK8B,G,oBAKtB,E,iDAOjC,YACEC,EAAAA,EAAAA,GAAoBC,KAAKC,SAAUD,KAAKE,K,GACzC,CAAAC,IAAA,mBAAAC,MAED,WAAgB,IAAAC,EAAA,KACdC,MAAMC,KAAKP,KAAKE,KAAKM,iBAAiB,gBAAgBC,SACpD,SAACC,GACMA,EAASC,OAAMD,EAASC,KAAON,EAAKM,MACzCD,EAASE,WAAaP,EAAKQ,K,KAI/BC,EAAAA,EAAAA,GACE,CACE,CAAEC,KAAMf,KAAKa,MAAOG,SAAU,SAC9B,CAAED,KAAMf,KAAKW,KAAMK,SAAU,SAE/B,iB,GAEH,CAAAb,IAAA,gBAAAC,MAGD,SAAca,GACZ,IAAMC,EAAiBZ,MAAMC,KAC3BP,KAAKE,KAAKM,iBAAiB,gBAC3BW,QAAO,SAACT,GAAQ,OAAKA,EAASU,UAAYV,EAAST,QAAQ,IAC7DD,KAAKqB,SAASC,KAAK,CACjBlB,MAAOc,EAAeK,KAAI,SAACC,GAAG,OAAKA,EAAIpB,KAAK,IAC5Cc,eAAgBA,EAAeK,KAAI,SAACC,G,MAAQ,MAAC,CAC3Cd,SAAUc,EACVC,eAAkD,QAAlCC,EAAAF,EAAIG,cAAc,wBAAgB,IAAAD,OAAA,EAAAA,EAAEtB,M,IAEtDwB,eAAgBX,EAAGY,Q,GAEtB,CAAA1B,IAAA,SAAAC,MAED,WAAM,IAAA0B,EACEC,GAAcC,EAAAA,EAAAA,GAClBhC,KAAKW,KACe,KAApBX,KAAKiC,WACqB,KAA1BjC,KAAKkC,kBAEDC,GAAsBC,EAAAA,EAAAA,GAC1BpC,KAAKkC,iBACLlC,KAAKC,UAGP,OACEoC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAACC,OAAKT,EAAA,IAAAU,EAAAA,EAAAA,GAAAV,EAAK,QAAU9B,KAAKyC,QAAKD,EAAAA,EAAAA,GAAAV,EAAE,GAAFY,OAAM1C,KAAK2C,OAAS,GAAIb,KAC9B,UAA1B9B,KAAKkC,kBACLlC,KAAK4C,UACL5C,KAAK6C,aACLR,EAAAA,EAAAA,GAAA,QACES,GAAG,uBACHP,MAAM,0BAAyB,cACnB,QAEXvC,KAAKa,MAAO,IACc,UAA1Bb,KAAKkC,iBAA+B,gBAAkB,KAAM,IAC5DlC,KAAK4C,SAAW,WAAa,OAGlCP,EAAAA,EAAAA,GAAA,YACES,GAAI9C,KAAKW,KAAI,kBACI,GAAA+B,OACW,UAA1B1C,KAAKkC,kBAAgClC,KAAK4C,UAAY5C,KAAK6C,UACvD,uBACA,GACN,KAAAH,OAAIX,GAAcgB,OAClB9C,SAAUD,KAAKC,WAEbD,KAAK6C,YACLR,EAAAA,EAAAA,GAAA,eACEA,EAAAA,EAAAA,GAAA,kBACEE,OAAKC,EAAAA,EAAAA,GAAA,MAAAE,OAAQ1C,KAAKkC,mBAAqB,GACvCrB,MAAOb,KAAKa,MACZoB,WAAYjC,KAAKiC,WACjBW,SAAU5C,KAAK4C,SACf3C,SAAUD,KAAKC,SACf+C,IAAKhD,KAAKW,SAIhB0B,EAAAA,EAAAA,GAAA,OAAKE,MAAM,yBACTF,EAAAA,EAAAA,GAAA,eAGHF,IACCE,EAAAA,EAAAA,GAAA,uBACEW,IAAKhD,KAAKW,KACVsC,aAAa,SACbC,OAAQlD,KAAKkC,iBACbiB,QAASnD,KAAKoD,iB,GAKvB,CAAAjD,IAAA,OAAAkD,IAAA,W,0BA3JuB,I,QCzBC,27F","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-checkbox-group/ic-checkbox-group.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-checkbox-group/ic-checkbox-group.css?tag=ic-checkbox-group&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Host,\n  h,\n  Prop,\n  Listen,\n  Element,\n  Event,\n  EventEmitter,\n} from \"@stencil/core\";\nimport {\n  getInputDescribedByText,\n  hasValidationStatus,\n  onComponentRequiredPropUndefined,\n  removeDisabledFalse,\n} from \"../../utils/helpers\";\nimport { IcInformationStatusOrEmpty, IcSizes } from \"../../utils/types\";\nimport { IcChangeEventDetail } from \"./ic-checkbox-group.types\";\n\n@Component({\n  tag: \"ic-checkbox-group\",\n  styleUrl: \"ic-checkbox-group.css\",\n  shadow: true,\n})\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport class CheckboxGroup {\n  @Element() host: HTMLIcCheckboxGroupElement;\n\n  /**\n   * If `true`, the checkbox group will be set to the disabled state.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * The helper text that will be displayed for additional field guidance.\n   */\n  @Prop() helperText: string = \"\";\n\n  /**\n   * If `true`, the label will be hidden and the required label value will be applied as an aria-label.\n   */\n  @Prop() hideLabel: boolean = false;\n\n  /**\n   * The label for the checkbox group to be displayed.\n   */\n  @Prop() label!: string;\n\n  /**\n   * The name for the checkbox group to differentiate from other groups.\n   */\n  @Prop() name!: string;\n\n  /**\n   * If `true`, the checkbox group will require a value.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * The size of the checkboxes to be displayed. This does not affect the font size of the label.\n   */\n  @Prop() size?: IcSizes = \"default\";\n\n  /**\n   * @deprecated This prop should not be used anymore. Set prop `size` to \"small\" instead.\n   */\n  @Prop() small: boolean = false;\n\n  /**\n   * The validation status - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationStatus: IcInformationStatusOrEmpty = \"\";\n\n  /**\n   * The validation text - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationText: string = \"\";\n\n  /**\n   * Emitted when a checkbox is checked.\n   */\n  @Event() icChange: EventEmitter<IcChangeEventDetail>;\n\n  componentWillLoad(): void {\n    removeDisabledFalse(this.disabled, this.host);\n  }\n\n  componentDidLoad(): void {\n    Array.from(this.host.querySelectorAll(\"ic-checkbox\")).forEach(\n      (checkbox) => {\n        if (!checkbox.name) checkbox.name = this.name;\n        checkbox.groupLabel = this.label;\n      }\n    );\n\n    onComponentRequiredPropUndefined(\n      [\n        { prop: this.label, propName: \"label\" },\n        { prop: this.name, propName: \"name\" },\n      ],\n      \"Checkbox Group\"\n    );\n  }\n\n  @Listen(\"icCheck\")\n  selectHandler(ev: CustomEvent): void {\n    const checkedOptions = Array.from(\n      this.host.querySelectorAll(\"ic-checkbox\")\n    ).filter((checkbox) => checkbox.checked && !checkbox.disabled);\n    this.icChange.emit({\n      value: checkedOptions.map((opt) => opt.value),\n      checkedOptions: checkedOptions.map((opt) => ({\n        checkbox: opt,\n        textFieldValue: opt.querySelector(\"ic-text-field\")?.value,\n      })),\n      selectedOption: ev.target as HTMLIcCheckboxElement,\n    });\n  }\n\n  render() {\n    const describedBy = getInputDescribedByText(\n      this.name,\n      this.helperText !== \"\",\n      this.validationStatus !== \"\"\n    );\n    const hadValidationStatus = hasValidationStatus(\n      this.validationStatus,\n      this.disabled\n    );\n\n    return (\n      <Host class={{ [\"small\"]: this.small, [`${this.size}`]: true }}>\n        {(this.validationStatus === \"error\" ||\n          this.required ||\n          this.hideLabel) && (\n          <span\n            id=\"screenReaderOnlyText\"\n            class=\"screen-reader-only-text\"\n            aria-hidden=\"true\"\n          >\n            {this.label}{\" \"}\n            {this.validationStatus === \"error\" ? \"invalid data \" : null}{\" \"}\n            {this.required ? \"required\" : null}\n          </span>\n        )}\n        <fieldset\n          id={this.name}\n          aria-labelledby={`${\n            this.validationStatus === \"error\" || this.required || this.hideLabel\n              ? \"screenReaderOnlyText\"\n              : \"\"\n          } ${describedBy}`.trim()}\n          disabled={this.disabled}\n        >\n          {!this.hideLabel && (\n            <legend>\n              <ic-input-label\n                class={{ [`${this.validationStatus}`]: true }}\n                label={this.label}\n                helperText={this.helperText}\n                required={this.required}\n                disabled={this.disabled}\n                for={this.name}\n              ></ic-input-label>\n            </legend>\n          )}\n          <div class=\"checkboxes-container\">\n            <slot></slot>\n          </div>\n        </fieldset>\n        {hadValidationStatus && (\n          <ic-input-validation\n            for={this.name}\n            ariaLiveMode=\"polite\"\n            status={this.validationStatus}\n            message={this.validationText}\n          ></ic-input-validation>\n        )}\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  display: block;\n}\n\nic-input-label.error {\n  color: var(--ic-status-error);\n}\n\nic-input-label ic-typography {\n  margin-bottom: var(--ic-space-sm);\n}\n\n:host(.small) ic-input-label ic-typography {\n  margin-bottom: calc(var(--ic-space-sm) / 2);\n}\n\nic-input-validation {\n  margin-top: var(--ic-space-sm);\n}\n\n:host(.small) ic-input-validation {\n  margin-top: calc(var(--ic-space-sm) / 2);\n}\n\n.checkboxes-container {\n  margin-bottom: calc(-1 * var(--ic-space-xxs));\n}\n\n:host(.small) .checkboxes-container {\n  margin-bottom: calc(-1 * var(--ic-space-xxxs));\n}\n\n.screen-reader-only-text {\n  position: absolute;\n  left: -9999px;\n  background-color: #fff;\n  color: #000;\n  text-transform: none;\n}\n"],"names":["CheckboxGroup","removeDisabledFalse","this","disabled","host","key","value","_this","Array","from","querySelectorAll","forEach","checkbox","name","groupLabel","label","onComponentRequiredPropUndefined","prop","propName","ev","checkedOptions","filter","checked","icChange","emit","map","opt","textFieldValue","_a","querySelector","selectedOption","target","_class","describedBy","getInputDescribedByText","helperText","validationStatus","hadValidationStatus","hasValidationStatus","h","Host","class","_defineProperty","small","concat","size","required","hideLabel","id","trim","for","ariaLiveMode","status","message","validationText","get"],"sourceRoot":""}