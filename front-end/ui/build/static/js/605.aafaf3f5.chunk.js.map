{"version":3,"file":"static/js/605.aafaf3f5.chunk.js","mappings":"4NA4BaA,EAAG,W,kRACN,KAAAC,gBAA0B,EAE1B,KAAAC,iBAA2B,EAqF3B,KAAAC,YAAc,WACpBC,EAAKC,SAASC,KAAK,CACjBC,MAAOH,EAAKG,MACZC,UAAWJ,EAAKI,UAChBC,SAAUL,EAAKM,cAEbN,EAAKH,iBACPG,EAAKO,SAASL,KAAK,CACjBC,MAAOH,EAAKG,MACZC,UAAWJ,EAAKI,UAChBC,SAAUL,EAAKM,cAEjBN,EAAKH,gBAAiB,E,EAIlB,KAAAW,YAAc,WACfR,EAAKH,iBACRG,EAAKS,WAAaT,EAAKG,MAEvBH,EAAKO,SAASL,KAAK,CACjBC,MAAOH,EAAKG,MACZC,UAAWJ,EAAKI,UAChBC,SAAUL,EAAKM,c,EAKb,KAAAI,gBAAkB,WAIxBV,EAAKH,gBAAiB,C,kBAhH0B,O,eAGJ,U,eAKjB,E,eAGiB,E,6FAS9C,WACEc,KAAKC,WAAWV,M,GACjB,CAAAW,IAAA,oBAAAC,MA2BD,WACEH,KAAKI,WAAWb,KAAKS,KAAKK,K,GAC3B,CAAAH,IAAA,uBAAAC,MAED,WACE,IAAMG,EAAaC,SAASC,cAAc,6BAADC,OACVT,KAAKP,UAAS,MAEzCa,GACFA,EAAWI,oBAAoBV,KAAKF,W,GAEvC,CAAAI,IAAA,oBAAAC,MAED,YACEQ,EAAAA,EAAAA,GAAoBX,KAAKY,SAAUZ,KAAKK,K,GACzC,CAAAH,IAAA,qBAAAC,MAED,WACEH,KAAKb,iBAAkB,C,kEAOzB,SAAA0B,IAAA,OAAAC,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACMlB,KAAKK,MACPL,KAAKK,KAAKc,QACX,wBAAAH,EAAAI,OAAA,GAAAP,EAAA,UACF,yBAAAQ,EAAAC,MAAA,KAAAC,UAAA,E,IAAA,CAAArB,IAAA,SAAAC,MAqCD,WAAM,IAAAqB,EACIZ,EAAmCZ,KAAnCY,SAAUa,EAAyBzB,KAAzByB,SAAUC,EAAe1B,KAAf0B,WAC5B,OACEC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CACHC,OAAKL,EAAA,IAAAM,EAAAA,EAAAA,GAAAN,EACF,mBAAqBxB,KAAKb,kBAAe2C,EAAAA,EAAAA,GAAAN,EACzC,eAAiBE,IAAeK,EAAAA,EAAsBC,QAAKF,EAAAA,EAAAA,GAAAN,EAC3D,WAAaC,IAAQK,EAAAA,EAAAA,GAAAN,EACrB,WAAaZ,GAAQY,GAExBS,KAAK,MAAK,gBACKR,EAAW,OAAS,QACnCS,QAASlC,KAAKZ,YACd+C,QAASnC,KAAKH,YACduC,YAAapC,KAAKD,gBAAe,gBAClBa,EAAW,OAAS,QACnCyB,SAAUrC,KAAKyB,SAAW,GAAK,GAE9BzB,KAAKK,KAAKG,cAAc,mBAAoBmB,EAAAA,EAAAA,GAAA,QAAMW,KAAK,UACxDX,EAAAA,EAAAA,GAAA,iBAAeE,MAAM,eAAeU,QAAQ,UAC1CZ,EAAAA,EAAAA,GAAA,aACEA,EAAAA,EAAAA,GAAA,gBAGHa,EAAAA,EAAAA,GAAWxC,KAAKK,KAAM,WAAYsB,EAAAA,EAAAA,GAAA,QAAMW,KAAK,U,GAGnD,CAAApC,IAAA,OAAAuC,IAAA,W,uGAtJa,G,QC5BC,i7H","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-tab/ic-tab.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-tab/ic-tab.css?tag=ic-tab&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Host,\n  Prop,\n  h,\n  Method,\n  Watch,\n} from \"@stencil/core\";\n\nimport { IcTabClickEventDetail } from \"./ic-tab.types\";\nimport {\n  IcThemeForegroundNoDefault,\n  IcThemeForegroundEnum,\n} from \"../../utils/types\";\nimport { isSlotUsed, removeDisabledFalse } from \"../../utils/helpers\";\n\n/**\n * @slot icon - Content will be rendered next to the tab label.\n * @slot badge - Badge component displayed inline with the tab.\n */\n@Component({\n  tag: \"ic-tab\",\n  styleUrl: \"ic-tab.css\",\n  shadow: true,\n})\nexport class Tab {\n  private focusFromClick: boolean = false;\n  private focusTabId: string;\n  private isInitialRender: boolean = true;\n\n  @Element() host: HTMLIcTabElement;\n\n  /** @internal Determines whether the light or dark variant of the tabs should be displayed. */\n  @Prop() appearance?: IcThemeForegroundNoDefault = \"dark\";\n\n  /** @internal The unique context needed if using multiple tabs inside one another i.e. rendering another tabs inside a tab panel. */\n  @Prop({ reflect: true }) contextId?: string = \"default\";\n\n  /**\n   * If `true`, the disabled state will be set.\n   */\n  @Prop() disabled?: boolean = false;\n\n  /** @internal If `true`, the tab will display with a selected indicator and tabIndex will be set. */\n  @Prop({ reflect: true }) selected?: boolean = false;\n\n  /** @internal The shared ID between panel and tab. */\n  @Prop({ reflect: true }) tabId?: string;\n\n  /** @internal The position of the tab inside the tabs array in context. */\n  @Prop() tabPosition?: number;\n\n  @Watch(\"disabled\")\n  disabledWatchHandler(): void {\n    this.tabEnabled.emit();\n  }\n\n  /**\n   * @internal Emitted when a tab is selected.\n   */\n  @Event() tabClick: EventEmitter<IcTabClickEventDetail>;\n\n  /**\n   * @internal Emitted when a tab is dynamically created.\n   */\n  @Event() tabCreated: EventEmitter<HTMLIcTabElement>;\n\n  /**\n   * @internal Emitted when a tab's disabled prop changes\n   */\n  @Event() tabEnabled: EventEmitter<void>;\n\n  /**\n   * @internal Emitted when a tab is focussed.\n   */\n  @Event() tabFocus: EventEmitter<IcTabClickEventDetail>;\n\n  /**\n   * @internal Emitted when a tab is unmounted.\n   */\n  @Event() tabRemoved: EventEmitter<void>;\n\n  connectedCallback(): void {\n    this.tabCreated.emit(this.host);\n  }\n\n  disconnectedCallback(): void {\n    const tabContext = document.querySelector(\n      `ic-tab-context[context-id=${this.contextId}]`\n    ) as HTMLIcTabContextElement;\n    if (tabContext) {\n      tabContext.tabRemovedHandler(!!this.focusTabId);\n    }\n  }\n\n  componentWillLoad(): void {\n    removeDisabledFalse(this.disabled, this.host);\n  }\n\n  componentDidUpdate(): void {\n    this.isInitialRender = false;\n  }\n\n  /**\n   * Sets focus on the tab.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    if (this.host) {\n      this.host.focus();\n    }\n  }\n\n  private handleClick = () => {\n    this.tabClick.emit({\n      tabId: this.tabId,\n      contextId: this.contextId,\n      position: this.tabPosition,\n    });\n    if (this.focusFromClick) {\n      this.tabFocus.emit({\n        tabId: this.tabId,\n        contextId: this.contextId,\n        position: this.tabPosition,\n      });\n      this.focusFromClick = false;\n    }\n  };\n\n  private handleFocus = () => {\n    if (!this.focusFromClick) {\n      this.focusTabId = this.tabId;\n\n      this.tabFocus.emit({\n        tabId: this.tabId,\n        contextId: this.contextId,\n        position: this.tabPosition,\n      });\n    }\n  };\n\n  private handleMouseDown = () => {\n    //set flag so that focus gets handled after click\n    //there is a timing issue where a long click only causes focus to happen & not the click\n    //the focus does need to be a seperate event though to handle focus from keyboard\n    this.focusFromClick = true;\n  };\n\n  render() {\n    const { disabled, selected, appearance } = this;\n    return (\n      <Host\n        class={{\n          [\"with-transition\"]: !this.isInitialRender,\n          [\"ic-tab-light\"]: appearance === IcThemeForegroundEnum.Light,\n          [\"selected\"]: selected,\n          [\"disabled\"]: disabled,\n        }}\n        role=\"tab\"\n        aria-selected={selected ? \"true\" : \"false\"}\n        onClick={this.handleClick}\n        onFocus={this.handleFocus}\n        onMouseDown={this.handleMouseDown}\n        aria-disabled={disabled ? \"true\" : \"false\"}\n        tabindex={this.selected ? 0 : -1}\n      >\n        {this.host.querySelector('[slot=\"icon\"]') && <slot name=\"icon\"></slot>}\n        <ic-typography class=\"ic-tab-label\" variant=\"label\">\n          <span>\n            <slot></slot>\n          </span>\n        </ic-typography>\n        {isSlotUsed(this.host, \"badge\") && <slot name=\"badge\"></slot>}\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  --indicator-initial-color: rgba(23 89 188 / 0%);\n  --indicator-color: var(--ic-action-default);\n  --focus-indicator: var(--ic-border-focus);\n  --label-color: var(--ic-color-primary-text);\n  --background-color-hover: var(--ic-action-default-bg-hover);\n  --background-color-active: var(--ic-action-default-bg-active);\n\n  display: flex;\n  align-items: center;\n  border-radius: 0;\n  color: var(--label-color);\n  height: 2.5rem;\n  padding: 0 var(--ic-space-md);\n  cursor: pointer;\n  position: relative;\n  border-bottom: var(--ic-space-xxs) solid var(--indicator-initial-color);\n  gap: var(--ic-space-xs);\n  transition: all var(--ic-easing-transition-fast);\n}\n\n:host(:focus) {\n  box-shadow: var(--focus-indicator);\n  border-radius: var(--ic-border-radius);\n}\n\n:host(:focus-visible) {\n  outline: var(--ic-hc-focus-outline);\n}\n\n:host(:hover) {\n  background-color: var(--background-color-hover);\n}\n\n:host(:active) {\n  background-color: var(--background-color-active);\n}\n\n:host(.ic-tab-light) {\n  --indicator-initial-color: rgb(255 255 255 / 0%);\n  --indicator-color: rgb(255 255 255 / 100%);\n  --focus-indicator: var(--ic-border-focus);\n  --label-color: white;\n  --background-color-hover: var(--ic-action-dark-bg-hover);\n  --background-color-active: var(--ic-action-dark-bg-active);\n}\n\n:host(.selected) {\n  border-bottom: var(--ic-space-xxs) solid var(--indicator-color);\n}\n\n:host(.disabled) {\n  pointer-events: none;\n  color: var(--ic-architectural-300);\n}\n\n:host(.selected.with-transition) {\n  transition: all var(--ic-easing-transition-slow),\n    border-color var(--ic-transition-duration-slow);\n}\n\n.ic-tab-label {\n  pointer-events: none;\n}\n\n::slotted(svg) {\n  fill: currentcolor;\n}\n\n@media (forced-colors: active) {\n  :host {\n    border-bottom: var(--ic-space-xxs) solid canvas;\n  }\n\n  :host(.disabled) {\n    color: GrayText;\n  }\n}\n"],"names":["Tab","focusFromClick","isInitialRender","handleClick","_this","tabClick","emit","tabId","contextId","position","tabPosition","tabFocus","handleFocus","focusTabId","handleMouseDown","this","tabEnabled","key","value","tabCreated","host","tabContext","document","querySelector","concat","tabRemovedHandler","removeDisabledFalse","disabled","_callee","_regeneratorRuntime","wrap","_context","prev","next","focus","stop","_setFocus","apply","arguments","_class","selected","appearance","h","Host","class","_defineProperty","IcThemeForegroundEnum","Light","role","onClick","onFocus","onMouseDown","tabindex","name","variant","isSlotUsed","get"],"sourceRoot":""}