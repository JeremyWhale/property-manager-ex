{"version":3,"file":"static/js/7894.48b8302a.chunk.js","mappings":"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","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-stepper/ic-stepper.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-stepper/ic-stepper.css?tag=ic-stepper&encapsulation=shadow"],"sourcesContent":["import { Component, Element, Host, Prop, h, State } from \"@stencil/core\";\nimport { checkResizeObserver, pxToRem } from \"../../utils/helpers\";\nimport { IcStepperAlignment } from \"./ic-stepper.types\";\nimport { IcStepTypes, IcStepVariants } from \"../ic-step/ic-step.types\";\n\n@Component({\n  tag: \"ic-stepper\",\n  styleUrl: \"ic-stepper.css\",\n  shadow: true,\n})\nexport class Stepper {\n  private resizeObserver: ResizeObserver = null;\n  private steps: HTMLIcStepElement[];\n  private stepsWithStepTitles: HTMLIcStepElement[];\n\n  @Element() el: HTMLIcStepperElement;\n\n  @State() alignedFullWidth: boolean = true;\n  @State() autoSetStepTitles: boolean = true;\n  @State() lastStepWidth: number = 0;\n  @State() noOfResizes?: number = 0;\n  @State() stepperWidth: number = document\n    .querySelector(\"ic-stepper\")\n    .getBoundingClientRect().width;\n  @State() stepTypes: IcStepTypes[] = [];\n  @State() variantOverride?: boolean = this.variant !== \"compact\";\n\n  /**\n   * The alignment of the default stepper within its container.\n   */\n  @Prop() aligned?: IcStepperAlignment = \"full-width\";\n\n  /**\n   * The length of the connnector between each step in pixels. Minimum length is 100px.\n   */\n  @Prop() connectorWidth?: number = 100;\n\n  /**\n   * If `true`, the information about each step, i.e. step title, step subtitle and step status, will be hidden on all default steps. The information about each step will still be visible in the compact variant of the stepper.\n   */\n  @Prop() hideStepInfo?: boolean = false;\n\n  /**\n   * The variant of the stepper.\n   */\n  @Prop({ mutable: true }) variant?: IcStepVariants = \"default\";\n\n  disconnectedCallback(): void {\n    if (this.resizeObserver !== null) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  componentWillLoad(): void {\n    this.setStepTypes();\n    if (this.variant === \"compact\") {\n      this.variantOverride = false;\n    }\n  }\n\n  componentWillRender(): void {\n    this.initialiseStepStates();\n  }\n\n  componentDidLoad(): void {\n    checkResizeObserver(this.runResizeObserver);\n  }\n\n  // Get all steps currently within this stepper\n  private getChildren = (): void => {\n    this.steps = Array.from(this.el.querySelectorAll(\"ic-step\"));\n\n    this.stepsWithStepTitles = Array.from(\n      this.el.querySelectorAll(\"ic-step[step-title]\")\n    );\n  };\n\n  // Inform the user that stepTitles are required on all steps in a compact stepper\n  private checkStepTitles = (): void => {\n    if (\n      this.stepsWithStepTitles.length < this.steps.length &&\n      this.variantOverride &&\n      this.variant === \"compact\"\n    ) {\n      this.noOfResizes = this.noOfResizes + 1;\n      if (this.noOfResizes === 1) {\n        console.error(\n          `The prop 'step-title' (web components) / 'stepTitle' (react) is required for all steps of the Stepper component (compact variant)`\n        );\n      }\n    }\n  };\n\n  private setStepTypes = (): void => {\n    this.getChildren();\n    this.stepTypes = [];\n    for (let i = 0; i < this.steps.length; i++) {\n      this.stepTypes.push(\"active\");\n    }\n  };\n\n  private setStepperWidth = (): void => {\n    this.alignedFullWidth =\n      this.variant === \"default\" && this.aligned === \"full-width\";\n\n    const lastStep = this.steps[this.steps.length - 1];\n    lastStep.style.maxWidth = \"none\";\n\n    if (this.alignedFullWidth) {\n      this.stepperWidth = this.el.offsetWidth;\n      lastStep.style.maxWidth = pxToRem(\n        `${this.stepperWidth / this.steps.length}px`\n      );\n      this.lastStepWidth = lastStep.offsetWidth;\n    }\n  };\n\n  private initialiseStepStates = (): void => {\n    this.steps.forEach((step, index) => {\n      // Set variant\n      step.variant = this.variant;\n      // Assign stepNum to each step\n      step.stepNum = index + 1;\n      // Assign lastStep to final step\n      step.lastStep = index === this.steps.length - 1;\n      step.lastStepNum = this.steps.length;\n\n      if (step.stepType !== \"current\") {\n        step.current = false;\n        this.stepTypes[index] = step.stepType;\n      } else {\n        step.current = true;\n      }\n\n      const stepTitleArea =\n        step.shadowRoot &&\n        step.shadowRoot.querySelector(\".step > .step-title-area\");\n\n      if (this.stepsWithStepTitles.length == 0 && this.variantOverride) {\n        if (this.variant === \"compact\") {\n          this.autoSetStepTitles = true;\n          if (this.autoSetStepTitles) {\n            step.stepTitle = \"Step \" + step.stepNum;\n            stepTitleArea &&\n              stepTitleArea\n                .querySelector(\".step-title\")\n                .setAttribute(\"aria-hidden\", \"true\");\n          }\n        }\n        if (this.variant === \"default\") {\n          this.autoSetStepTitles = false;\n          if (!this.autoSetStepTitles) {\n            step.stepTitle = undefined;\n            stepTitleArea &&\n              stepTitleArea\n                .querySelector(\".step-title\")\n                .removeAttribute(\"aria-hidden\");\n          }\n        }\n      }\n\n      if (this.variant === \"compact\") {\n        if (step.current === true || step.stepType === \"current\") {\n          step.classList.remove(\"hide\");\n          step.classList.add(\"show\");\n        } else if (step.classList.contains(\"show\")) {\n          step.classList.remove(\"show\");\n          step.classList.add(\"hide\");\n        }\n\n        if (!step.lastStep) {\n          step.nextStepTitle = this.steps[index + 1].stepTitle;\n          step.progress = (step.stepNum / this.steps.length) * 100;\n        } else if (step.lastStep && this.stepTypes[index] !== \"completed\") {\n          step.progress = 95;\n        } else {\n          step.progress = 100;\n        }\n\n        if (this.hideStepInfo && stepTitleArea !== null) {\n          stepTitleArea.classList.remove(\"visually-hidden\");\n        }\n\n        step.compactStepStyling = this.stepTypes[index];\n      }\n\n      if (this.variant === \"default\") {\n        if (!step.lastStep) {\n          if (this.alignedFullWidth) {\n            step.style.width = pxToRem(\n              `${\n                (this.stepperWidth - this.lastStepWidth) /\n                (this.steps.length - 1)\n              }px`\n            );\n            step.style.minWidth = pxToRem(\"148px\");\n          }\n        } else if (step.lastStep) {\n          step.classList.add(\"last-step\");\n          if (this.alignedFullWidth) {\n            step.style.maxWidth = `${this.lastStepWidth}px`;\n          } else {\n            step.style.maxWidth =\n              this.connectorWidth > 100\n                ? pxToRem(`${this.connectorWidth + 48}px`)\n                : pxToRem(\"148px\");\n          }\n        }\n\n        if (this.aligned === \"left\") {\n          step.style.width =\n            this.connectorWidth > 100\n              ? pxToRem(`${this.connectorWidth + 48}px`)\n              : pxToRem(\"148px\");\n          const stepConnect = step.shadowRoot.querySelector(\n            \".step > .step-top > .step-connect\"\n          ) as HTMLElement;\n\n          if (stepConnect) {\n            stepConnect.style.width =\n              this.connectorWidth > 100\n                ? pxToRem(`${this.connectorWidth}px`)\n                : pxToRem(\"100px\");\n          }\n        }\n\n        if (this.hideStepInfo && stepTitleArea !== null) {\n          stepTitleArea.classList.add(\"visually-hidden\");\n        }\n      }\n    });\n  };\n\n  private overrideVariant = () => {\n    let minDefaultStepperWidth = 148 * this.steps.length;\n\n    if (this.aligned === \"left\" && this.connectorWidth > 100) {\n      minDefaultStepperWidth = (this.connectorWidth + 48) * this.steps.length;\n    }\n\n    if (this.variantOverride) {\n      if (this.el.clientWidth < minDefaultStepperWidth) {\n        this.variant = \"compact\";\n        this.getChildren();\n      } else {\n        this.variant = \"default\";\n        this.getChildren();\n      }\n    }\n  };\n\n  private resizeObserverCallback = () => {\n    this.getChildren();\n    this.checkStepTitles();\n    this.overrideVariant();\n    this.setStepperWidth();\n    this.initialiseStepStates();\n  };\n\n  private runResizeObserver = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      this.resizeObserverCallback();\n    });\n    this.resizeObserver.observe(this.el);\n  };\n\n  render() {\n    return (\n      <Host\n        class={{\n          [`${this.variant}`]: true,\n          [\"aligned-left\"]:\n            this.variant === \"default\" && this.aligned === \"left\",\n        }}\n      >\n        <ul class=\"step-item-list\">\n          <slot></slot>\n        </ul>\n      </Host>\n    );\n  }\n}\n",":host {\n  display: flex;\n  width: 100%;\n}\n\n.step-item-list {\n  display: flex;\n  margin: 0;\n  padding: 0;\n}\n\n:host(.default:not(.aligned-left)) .step-item-list {\n  flex: auto;\n}\n\n:host(.compact) ul ::slotted(ic-step) {\n  display: none;\n}\n\n:host(.compact) ul ::slotted(ic-step.show) {\n  display: flex;\n}\n\n:host(.compact) ul ::slotted(ic-step.hide) {\n  display: none;\n  opacity: 0;\n  visibility: hidden;\n}\n"],"names":["Stepper","resizeObserver","getChildren","_this","steps","Array","from","el","querySelectorAll","stepsWithStepTitles","checkStepTitles","length","variantOverride","variant","noOfResizes","console","error","setStepTypes","stepTypes","i","push","setStepperWidth","alignedFullWidth","aligned","lastStep","style","maxWidth","stepperWidth","offsetWidth","pxToRem","concat","lastStepWidth","initialiseStepStates","forEach","step","index","stepNum","lastStepNum","stepType","current","stepTitleArea","shadowRoot","querySelector","autoSetStepTitles","stepTitle","setAttribute","undefined","removeAttribute","classList","remove","add","contains","progress","nextStepTitle","hideStepInfo","compactStepStyling","connectorWidth","width","minWidth","stepConnect","overrideVariant","minDefaultStepperWidth","clientWidth","resizeObserverCallback","runResizeObserver","ResizeObserver","observe","document","getBoundingClientRect","this","disconnect","key","value","checkResizeObserver","_class","h","Host","class","_defineProperty","get"],"sourceRoot":""}