{"version":3,"file":"static/js/9510.9ed3fce9.chunk.js","mappings":"wLA0BaA,G,QAAK,W,wGAoBR,KAAAC,wBAA0B,YAE9BC,EAAAA,EAAAA,KAA4BC,EAAAA,IAC5BD,EAAAA,EAAAA,KAA4BE,EAAAA,GAE5BC,QAAQC,KAAK,4T,EAMT,KAAAC,cAAgB,WACtB,GAAmB,OAAfC,EAAKC,MAAgB,CACvB,IAAIC,EAAY,KACVC,EAAYH,EAAKC,MAAMG,MAAM,EAAG,GACpB,MAAdD,EACFD,GAAYG,EAAAA,EAAAA,GAAUL,EAAKC,OACU,MAA5BE,EAAUG,gBACnBJ,GAAYK,EAAAA,EAAAA,GAAaP,EAAKC,QAEhCD,EAAKQ,aAAaN,E,GAId,KAAAM,aAAe,SAACN,GACtB,GAAkB,OAAdA,EAAoB,CACtB,IAAMO,EAAOC,SAASC,gBACtBF,EAAKG,MAAMC,YAAY,uBAAwBX,EAAUY,EAAEC,YAC3DN,EAAKG,MAAMC,YAAY,uBAAwBX,EAAUc,EAAED,YAC3DN,EAAKG,MAAMC,YAAY,uBAAwBX,EAAUe,EAAEF,YAC3DN,EAAKG,MAAMC,YAAY,uBAAwBX,EAAUgB,EAAEH,YAE3Df,EAAKP,0BAEL,IAAM0B,GAAkBC,EAAAA,EAAAA,KACxBpB,EAAKqB,YAAYC,KAAK,CAAEC,KAAMJ,EAAiBlB,MAAOC,G,cAnDjC,I,qDAGzB,WACEsB,KAAKzB,e,GACN,CAAA0B,IAAA,oBAAAC,MAOD,WACEF,KAAKzB,e,GACN,CAAA0B,IAAA,SAAAC,MAyCD,WACE,OAAOC,EAAAA,EAAAA,GAACC,EAAAA,EAAI,K,IACb,EAAAH,IAAA,WAAAI,IAAA,W,8CA7De,G","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-theme/ic-theme.tsx"],"sourcesContent":["import {\n  Component,\n  Host,\n  Event,\n  EventEmitter,\n  h,\n  Watch,\n  Prop,\n} from \"@stencil/core\";\n\nimport { IcColorRGBA, IcTheme } from \"../../utils/types\";\nimport {\n  getThemeForegroundColor,\n  hexToRgba,\n  rgbaStrToObj,\n} from \"../../utils/helpers\";\nimport { getThemeColorBrightness } from \"../../utils/helpers\";\nimport {\n  BLACK_MIN_COLOR_BRIGHTNESS,\n  WHITE_MAX_COLOR_BRIGHTNESS,\n} from \"../../utils/constants\";\n\n@Component({\n  tag: \"ic-theme\",\n  shadow: true,\n})\nexport class Theme {\n  /**\n   * The theme colour. Can be a hex value e.g. \"#ff0000\", RGB e.g. \"rgb(255, 0, 0)\", or RGBA e.g. \"rgba(255, 0, 0, 1)\".\n   */\n  @Prop() color?: string = null;\n\n  @Watch(\"color\")\n  watchColorPropHandler(): void {\n    this.setThemeColor();\n  }\n\n  /**\n   * @internal Emitted when the theme is changed.\n   */\n  @Event() themeChange: EventEmitter<IcTheme>;\n\n  componentWillLoad(): void {\n    this.setThemeColor();\n  }\n\n  private checkThemeColorContrast = (): void => {\n    if (\n      getThemeColorBrightness() < BLACK_MIN_COLOR_BRIGHTNESS &&\n      getThemeColorBrightness() > WHITE_MAX_COLOR_BRIGHTNESS\n    ) {\n      console.warn(\n        `The theme colour does not provide enough contrast with either of the ICDS black or white foreground colours. Consider choosing a colour with a different brightness to achieve sufficient colour contrast for good visibility. See https://www.w3.org/TR/AERT/#color-contrast for more information about colour contrast.`\n      );\n    }\n  };\n\n  private setThemeColor = () => {\n    if (this.color !== null) {\n      let colorRGBA = null;\n      const firstChar = this.color.slice(0, 1);\n      if (firstChar === \"#\") {\n        colorRGBA = hexToRgba(this.color);\n      } else if (firstChar.toLowerCase() === \"r\") {\n        colorRGBA = rgbaStrToObj(this.color);\n      }\n      this.setThemeRGBA(colorRGBA);\n    }\n  };\n\n  private setThemeRGBA = (colorRGBA: IcColorRGBA) => {\n    if (colorRGBA !== null) {\n      const root = document.documentElement;\n      root.style.setProperty(\"--ic-theme-primary-r\", colorRGBA.r.toString());\n      root.style.setProperty(\"--ic-theme-primary-g\", colorRGBA.g.toString());\n      root.style.setProperty(\"--ic-theme-primary-b\", colorRGBA.b.toString());\n      root.style.setProperty(\"--ic-theme-primary-a\", colorRGBA.a.toString());\n\n      this.checkThemeColorContrast();\n\n      const foregroundColor = getThemeForegroundColor();\n      this.themeChange.emit({ mode: foregroundColor, color: colorRGBA });\n    }\n  };\n\n  render() {\n    return <Host></Host>;\n  }\n}\n"],"names":["Theme","checkThemeColorContrast","getThemeColorBrightness","BLACK_MIN_COLOR_BRIGHTNESS","WHITE_MAX_COLOR_BRIGHTNESS","console","warn","setThemeColor","_this","color","colorRGBA","firstChar","slice","hexToRgba","toLowerCase","rgbaStrToObj","setThemeRGBA","root","document","documentElement","style","setProperty","r","toString","g","b","a","foregroundColor","getThemeForegroundColor","themeChange","emit","mode","this","key","value","h","Host","get"],"sourceRoot":""}