{"version":3,"file":"static/js/2947.f7f24a9b.chunk.js","mappings":"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","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-input-label/ic-input-label.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-input-label/ic-input-label.css?tag=ic-input-label","../node_modules/@ukic/web-components/dist/esm/src/components/ic-input-validation/ic-input-validation.css?tag=ic-input-validation","../node_modules/@ukic/web-components/dist/esm/src/components/ic-input-validation/ic-input-validation.tsx"],"sourcesContent":["import { Component, Host, Prop, h } from \"@stencil/core\";\n\nimport {\n  getInputHelperTextID,\n  onComponentRequiredPropUndefined,\n} from \"../../utils/helpers\";\n\n@Component({\n  tag: \"ic-input-label\",\n  styleUrl: \"./ic-input-label.css\",\n})\nexport class InputLabel {\n  /**\n   * If `true`, the dark variant of the input label will be displayed.\n   */\n  @Prop() dark?: boolean = false;\n\n  /**\n   * If `true`, the disabled state will be set.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * If `true`, the input label will display with error styling.\n   */\n  @Prop() error?: boolean = false;\n\n  /**\n   * The ID of the form element the label is bound to.\n   */\n  @Prop() for: string;\n\n  /**\n   * The helper text that will be displayed.\n   */\n  @Prop() helperText: string = \"\";\n\n  /**\n   * The text content of the label.\n   */\n  @Prop() label!: string;\n\n  /**\n   * If `true`, the readonly state will be set.\n   */\n  @Prop() readonly: boolean = false;\n\n  /**\n   * If `true`, the input label will require a value.\n   */\n  @Prop() required: boolean = false;\n\n  componentDidLoad(): void {\n    onComponentRequiredPropUndefined(\n      [{ prop: this.label, propName: \"label\" }],\n      \"Input Label\"\n    );\n  }\n\n  render() {\n    const { disabled, readonly, label, required, helperText, error, dark } =\n      this;\n    const labelText = required ? label + \" *\" : label;\n    const labelContent = readonly ? (\n      `${labelText}`\n    ) : (\n      <label htmlFor={this.for}>{labelText}</label>\n    );\n\n    const id = getInputHelperTextID(this.for);\n\n    return (\n      <Host\n        class={{\n          [\"disabled\"]: disabled,\n          [\"readonly\"]: readonly,\n          [\"with-helper\"]: helperText !== \"\",\n        }}\n      >\n        <ic-typography\n          variant=\"label\"\n          class={{\n            [\"readonly-label\"]: readonly,\n            [\"error-label\"]: error && !(readonly || disabled),\n            [\"dark\"]: dark,\n          }}\n        >\n          {labelContent}\n        </ic-typography>\n\n        {helperText !== \"\" && (\n          <ic-typography\n            variant=\"caption\"\n            class={{\n              [\"helpertext\"]: true,\n              [\"helpertext-normal\"]: !disabled && !readonly,\n              [\"helpertext-readonly\"]: readonly,\n            }}\n          >\n            <span id={id}>{helperText}</span>\n          </ic-typography>\n        )}\n      </Host>\n    );\n  }\n}\n","ic-input-label {\n  margin-bottom: var(--ic-space-xs);\n}\n\nic-input-label.with-helper {\n  margin-bottom: var(--ic-space-xxxs);\n}\n\nic-input-label.readonly {\n  color: var(--ic-color-tertiary-text);\n}\n\nic-input-label .helpertext {\n  margin-top: var(--ic-space-xxxs);\n}\n\nic-input-label .helpertext-normal {\n  color: var(--ic-color-secondary-text);\n}\n\nic-input-label .helpertext-readonly {\n  color: var(--ic-color-tertiary-text);\n}\n\nic-input-label .readonly-label {\n  color: var(--ic-color-secondary-text);\n}\n\nic-input-label .error-label {\n  color: var(--ic-status-error);\n}\n\nic-input-label .dark {\n  color: var(--ic-architectural-white);\n}\n","ic-input-validation {\n  width: var(--input-width, 20rem);\n  margin-top: var(--ic-space-xs);\n  display: flex;\n}\n\nic-input-validation.fullwidth {\n  width: 100%;\n}\n\nic-input-validation span.status-icon {\n  padding-right: var(--ic-space-xxs);\n}\n\nic-input-validation span.status-icon > svg {\n  height: 1.25rem;\n  width: 1.25rem;\n}\n\nic-input-validation span.icon-success > svg {\n  fill: var(--ic-status-success);\n}\n\nic-input-validation span.icon-error > svg {\n  fill: var(--ic-status-error);\n}\n\nic-input-validation span.icon-warning > svg {\n  fill: var(--ic-status-warning);\n}\n\nic-input-validation .statustext {\n  flex-grow: 1;\n}\n","import { Element, Component, Host, Prop, h } from \"@stencil/core\";\n\nimport {\n  IcInformationStatus,\n  IcInformationStatusOrEmpty,\n} from \"../../utils/types\";\nimport errorIcon from \"../../assets/error-icon.svg\";\nimport successIcon from \"../../assets/success-icon.svg\";\nimport warningIcon from \"../../assets/warning-icon.svg\";\n\nimport {\n  getInputValidationTextID,\n  onComponentRequiredPropUndefined,\n} from \"../../utils/helpers\";\nimport { IcAriaLiveModeVariants } from \"./ic-input-validation.types\";\n\nconst icon = {\n  [IcInformationStatus.Warning]: warningIcon,\n  [IcInformationStatus.Error]: errorIcon,\n  [IcInformationStatus.Success]: successIcon,\n};\n\n/**\n * @slot validation-message-adornment - Content will be placed to the right of the validation message.\n */\n@Component({\n  tag: \"ic-input-validation\",\n  styleUrl: \"ic-input-validation.css\",\n})\nexport class InputValidation {\n  @Element() el: HTMLIcInputValidationElement;\n\n  /**\n   *  The ARIA live mode to apply to the message.\n   */\n  @Prop() ariaLiveMode: IcAriaLiveModeVariants = \"polite\";\n\n  /**\n   * The ID of the form element the validation is bound to.\n   */\n  @Prop() for: string;\n\n  /**\n   *  If `true`, the input validation will fill the width of the container.\n   */\n  @Prop() fullWidth: boolean = false;\n\n  /**\n   * The validation message to display.\n   */\n  @Prop() message!: string;\n\n  /**\n   * The status of the validation - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() status: IcInformationStatusOrEmpty = \"\";\n\n  componentDidLoad(): void {\n    onComponentRequiredPropUndefined(\n      [{ prop: this.message, propName: \"message\" }],\n      \"Input Validation\"\n    );\n  }\n\n  render() {\n    const displayIcon = this.status !== \"\" ? icon[this.status] : \"\";\n    const id = getInputValidationTextID(this.for);\n    return (\n      <Host\n        class={{\n          [this.status]: this.status !== \"\",\n          [\"fullwidth\"]: this.fullWidth,\n        }}\n      >\n        {displayIcon !== \"\" && (\n          <span\n            class={{\n              [\"status-icon\"]: true,\n              [`icon-${this.status}`]: true,\n            }}\n            innerHTML={displayIcon}\n          />\n        )}\n\n        <ic-typography variant=\"caption\" class=\"statustext\">\n          <span aria-live={this.ariaLiveMode} id={id}>\n            {this.message}\n          </span>\n        </ic-typography>\n\n        <slot name=\"validation-message-adornment\"></slot>\n      </Host>\n    );\n  }\n}\n"],"names":["InputLabel","onComponentRequiredPropUndefined","prop","this","label","propName","key","value","_class","_class2","_class3","disabled","readonly","required","helperText","error","dark","labelText","labelContent","concat","h","htmlFor","for","id","getInputHelperTextID","Host","class","_defineProperty","variant","icon","_icon","IcInformationStatus","Warning","warningIcon","Error","errorIcon","Success","successIcon","InputValidation","message","_class4","_class5","displayIcon","status","getInputValidationTextID","fullWidth","innerHTML","ariaLiveMode","name","get"],"sourceRoot":""}