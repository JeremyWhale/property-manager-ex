{"version":3,"file":"static/js/7765.e6ac00f9.chunk.js","mappings":"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","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-text-field/ic-text-field.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-text-field/ic-text-field.css?tag=ic-text-field&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  Host,\n  Listen,\n  Prop,\n  State,\n  Watch,\n  Method,\n  h,\n} from \"@stencil/core\";\nimport {\n  IcInformationStatus,\n  IcAutocompleteTypes,\n  IcAutocorrectStates,\n  IcInformationStatusOrEmpty,\n  IcValueEventDetail,\n} from \"../../utils/types\";\nimport {\n  inheritAttributes,\n  debounceEvent,\n  getInputDescribedByText,\n  renderHiddenInput,\n  isEmptyString,\n  onComponentRequiredPropUndefined,\n  addFormResetListener,\n  removeFormResetListener,\n  isSlotUsed,\n  removeDisabledFalse,\n} from \"../../utils/helpers\";\nimport { IC_INHERITED_ARIA } from \"../../utils/constants\";\nimport {\n  IcAriaAutocompleteTypes,\n  IcTextFieldInputModes,\n  IcTextFieldTypes,\n} from \"./ic-text-field.types\";\n\nlet inputIds = 0;\n\n/**\n * @slot icon - Content will be placed to the left of the text input.\n */\n@Component({\n  tag: \"ic-text-field\",\n  styleUrl: \"ic-text-field.css\",\n  shadow: true,\n})\nexport class TextField {\n  private inheritedAttributes: { [k: string]: unknown } = {};\n  private inputEl: HTMLInputElement | HTMLTextAreaElement;\n  private showLeftIcon: boolean = this.hasLeftIconSlot();\n\n  @Element() el: HTMLIcTextFieldElement;\n\n  @State() numChars: number = 0;\n  @State() maxLengthExceeded: boolean = false;\n  @State() maxValueExceeded: boolean = false;\n  @State() minValueUnattained: boolean = false;\n\n  /**\n   * @slot clear-button - an ic-button clear component will render as an end adornment to the input.\n   * @slot search-submit-button - an ic-button search submit component will render as an end adornment to the input.\n   * @slot menu - an ic-menu component will appear below the input.\n   */\n\n  /**\n   * @internal The active element when focus is on the ic-menu items.\n   */\n  @Prop() ariaActiveDescendant?: string;\n\n  /**\n   * @internal Used to identify whether inputting any text triggers more predictions\n   */\n  @Prop() ariaAutocomplete: IcAriaAutocompleteTypes = undefined;\n\n  /**\n   * @internal Used to identify if the slotted menu is rendered\n   */\n  @Prop() ariaExpanded: string;\n\n  /**\n   * @internal Used to identify any related child component\n   */\n  @Prop() ariaOwns: string;\n\n  /**\n   * The automatic capitalisation of the text value as it is entered/edited by the user.\n   * Available options: \"off\", \"none\", \"on\", \"sentences\", \"words\", \"characters\".\n   */\n  @Prop() autocapitalize = \"off\";\n\n  /**\n   * The state of autocompletion the browser can apply on the text value.\n   */\n  @Prop() autocomplete: IcAutocompleteTypes = \"off\";\n\n  /**\n   * The state of autocorrection the browser can apply when the user is entering/editing the text value.\n   */\n  @Prop() autocorrect: IcAutocorrectStates = \"off\";\n\n  /**\n   * If `true`, the form control will have input focus when the page loads.\n   */\n  @Prop() autoFocus = false;\n\n  /**\n   * If `true`, the disabled state will be set.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * Specify whether the text field fills the full width of the container.\n   * If `true`, this overrides the --input-width CSS variable.\n   */\n  @Prop() fullWidth: boolean = false;\n\n  /**\n   * The helper text that will be displayed for additional field guidance.\n   */\n  @Prop() helperText: string = \"\";\n\n  /**\n   * If `true`, the label will be hidden and the required label value will be applied as an aria-label.\n   */\n  @Prop() hideLabel: boolean = false;\n\n  /**\n   * @internal If `true`, the hidden form input will stop rendering for form submission.\n   */\n  @Prop() hiddenInput: boolean = true;\n\n  /**\n   * The ID for the input.\n   */\n  @Prop() inputId?: string = `ic-text-field-input-${inputIds++}`;\n\n  /**\n   * A hint to the browser for which keyboard to display.\n   * Possible values: `\"none\"`, `\"text\"`, `\"tel\"`, `\"url\"`,\n   * `\"email\"`, `\"numeric\"`, `\"decimal\"`, and `\"search\"`.\n   */\n  @Prop() inputmode: IcTextFieldInputModes = \"text\";\n\n  /**\n   * The label for the input.\n   */\n  @Prop() label!: string;\n\n  /**\n   * The maximum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of max value in `helperText` or `label`)\n   */\n  @Prop() max: string | number = undefined;\n\n  /**\n   * The maximum number of characters that can be entered in the field.\n   */\n  @Prop() maxLength: number = 0;\n\n  /**\n   * The minimum number that can be accepted as a value, when `type` is `number` and `rows` is `1`. (NOTE: Ensure to include visual indication of min value in `helperText` or `label`)\n   */\n  @Prop() min: string | number = undefined;\n\n  /**\n   * The name of the control, which is submitted with the form data.\n   */\n  @Prop() name: string = this.inputId;\n\n  /**\n   * The placeholder value to be displayed.\n   */\n  @Prop() placeholder: string = \"\";\n\n  /**\n   * If `true`, the read only state will be set.\n   */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /**\n   * If `true`, the input will require a value.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * If `true`, the multiline text area will be resizeable.\n   */\n  @Prop() resize: boolean = false;\n\n  /**\n   * @internal Used to set the role if not default textbox;\n   */\n  @Prop() role: string;\n\n  /**\n   * The number of rows to transform the text field into a text area with a specific height.\n   */\n  @Prop() rows: number = 1;\n\n  /**\n   * If `true`, the small styling will be applied to the text field.\n   */\n  @Prop({ reflect: true }) small: boolean = false;\n\n  /**\n   * If `true`, the value of the text field will have its spelling and grammar checked.\n   */\n  @Prop() spellcheck: boolean = false;\n  /**\n   * @internal If `true`, an ellipsis will be displayed at the end of the value if the value is longer than the container.\n   */\n  @Prop() truncateValue?: boolean;\n\n  /**\n   * The type of control to display. The default type is text.\n   */\n  @Prop() type: IcTextFieldTypes = \"text\";\n\n  /**\n   * If `true`, the icon in input control will be displayed - only applies when validationStatus ='success'.\n   */\n  @Prop() validationInline: boolean = false;\n\n  /**\n   *  @internal If `true`, the validation will display inline.\n   */\n  @Prop() validationInlineInternal: boolean = false;\n\n  /**\n   * The validation state - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationStatus: IcInformationStatusOrEmpty = \"\";\n\n  /**\n   * The validation state - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationText: string = \"\";\n\n  /**\n   * The amount of time, in milliseconds, to wait to trigger the `icChange` event after each keystroke.\n   */\n  @Prop() debounce: number = 0;\n\n  @Watch(\"debounce\")\n  private debounceChanged() {\n    this.icChange = debounceEvent(this.icChange, this.debounce);\n  }\n\n  /**\n   * The value of the text field.\n   */\n  @Prop({ reflect: true, mutable: true }) value: string = \"\";\n  @State() initialValue = this.value;\n\n  @Watch(\"value\")\n  private watchValueHandler(newValue: string): void {\n    if (this.inputEl && this.inputEl.value !== newValue) {\n      this.inputEl.value = newValue;\n    }\n\n    this.numChars = newValue.length;\n\n    if (this.type === \"number\") {\n      if (newValue && Number(newValue) < Number(this.min)) {\n        this.minValueUnattained = true;\n      } else {\n        this.minValueUnattained = false;\n      }\n      if (Number(newValue) > Number(this.max)) {\n        this.maxValueExceeded = true;\n      } else {\n        this.maxValueExceeded = false;\n      }\n    }\n\n    if (this.maxLength > 0) {\n      if (newValue.length > this.maxLength) {\n        this.maxLengthExceeded = true;\n      } else {\n        this.maxLengthExceeded = false;\n      }\n    }\n    this.icChange.emit({ value: newValue });\n  }\n\n  /**\n   * @internal Emitted when the validationInlineInternal is `true`\n   */\n  @Event() getValidationText: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when input loses focus.\n   */\n  @Event() icBlur: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when the value has changed.\n   */\n  @Event() icChange: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when input gains focus.\n   */\n  @Event() icFocus: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when a keyboard input occurred.\n   */\n  @Event() icInput: EventEmitter<IcValueEventDetail>;\n\n  /**\n   * Emitted when a keydown event occurred.\n   */\n  @Event() icKeydown: EventEmitter<{ event: KeyboardEvent }>;\n\n  connectedCallback(): void {\n    this.debounceChanged();\n  }\n\n  disconnectedCallback(): void {\n    removeFormResetListener(this.el, this.handleFormReset);\n  }\n\n  componentWillLoad(): void {\n    this.watchValueHandler(this.value);\n\n    this.inheritedAttributes = inheritAttributes(this.el, [\n      ...IC_INHERITED_ARIA,\n      \"title\",\n      \"aria-autocomplete\",\n      \"aria-haspopup\",\n    ]);\n\n    if (this.readonly) {\n      this.maxLengthExceeded = false;\n      this.maxValueExceeded = false;\n      this.minValueUnattained = false;\n    }\n\n    addFormResetListener(this.el, this.handleFormReset);\n\n    removeDisabledFalse(this.disabled, this.el);\n  }\n\n  componentDidLoad(): void {\n    onComponentRequiredPropUndefined(\n      [{ prop: this.label, propName: \"label\" }],\n      \"Text Field\"\n    );\n    if (this.validationInlineInternal) {\n      this.getInlineValidationText();\n    }\n  }\n\n  @Listen(\"keydown\", {})\n  handleKeyDown(ev: KeyboardEvent): void {\n    this.icKeydown.emit({ event: ev });\n  }\n\n  /**\n   * Sets focus on the native `input`.\n   */\n\n  @Method()\n  async setFocus(): Promise<void> {\n    if (this.inputEl) {\n      this.inputEl.focus();\n    }\n  }\n\n  private onInput = (ev: Event) => {\n    this.value = (ev.target as HTMLInputElement).value;\n    this.icInput.emit({ value: this.value });\n  };\n\n  private onBlur = (ev: Event) => {\n    const value = (ev.target as HTMLInputElement).value;\n    this.icBlur.emit({ value: value });\n  };\n\n  private onFocus = (ev: Event) => {\n    const value = (ev.target as HTMLInputElement).value;\n    this.icFocus.emit({ value: value });\n  };\n\n  private isTextArea = (): boolean => {\n    return this.rows > 1;\n  };\n\n  private getInlineValidationText = () => {\n    this.getValidationText.emit({ value: this.validationText });\n  };\n\n  private hasLeftIconSlot(): boolean {\n    const iconEl = this.el.querySelector(`[slot=\"icon\"]`);\n    return iconEl !== null;\n  }\n\n  private hasStatus = (status: IcInformationStatusOrEmpty): boolean => {\n    return status !== \"\" && !this.disabled;\n  };\n\n  private showStatusText = (status: IcInformationStatusOrEmpty): boolean => {\n    return (\n      this.hasStatus(status) &&\n      !(status == IcInformationStatus.Success && this.validationInline) &&\n      !this.validationInlineInternal\n    );\n  };\n\n  private handleFormReset = (): void => {\n    this.value = this.initialValue;\n  };\n\n  render() {\n    const {\n      inputId,\n      name,\n      label,\n      required,\n      small,\n      placeholder,\n      helperText,\n      rows,\n      resize,\n      disabled,\n      value,\n      min,\n      max,\n      maxLength,\n      numChars,\n      readonly,\n      maxLengthExceeded,\n      minValueUnattained,\n      maxValueExceeded,\n      validationStatus,\n      validationText,\n      validationInline,\n      validationInlineInternal,\n      spellcheck,\n      inputmode,\n      fullWidth,\n      truncateValue,\n      hiddenInput,\n    } = this;\n\n    const disabledMode = readonly ? true : disabled;\n\n    const placeholderText = disabled ? \"\" : placeholder;\n\n    const currentStatus =\n      maxLengthExceeded || maxValueExceeded || minValueUnattained\n        ? IcInformationStatus.Error\n        : validationStatus;\n\n    const currentValidationText = maxLengthExceeded\n      ? \"Maximum length exceeded\"\n      : maxValueExceeded\n      ? `Maximum value of ${max} exceeded`\n      : minValueUnattained\n      ? `Minimum value of ${min} not met`\n      : validationText;\n\n    const maxNumChars = readonly ? 0 : maxLength;\n\n    const messageAriaLive =\n      maxLengthExceeded ||\n      maxValueExceeded ||\n      minValueUnattained ||\n      (maxLength === 0 && currentStatus === IcInformationStatus.Error)\n        ? \"assertive\"\n        : \"polite\";\n\n    const showStatusText = this.showStatusText(currentStatus);\n    const multiline = this.isTextArea();\n    const hiddenCharCountDescId =\n      maxLength > 0 ? inputId + \"-charcount-desc\" : \"\";\n    const describedBy = (\n      hiddenCharCountDescId +\n      \" \" +\n      getInputDescribedByText(inputId, helperText !== \"\", showStatusText)\n    ).trim();\n\n    if (this.showLeftIcon && !readonly && disabledMode) {\n      this.showLeftIcon = false;\n    }\n\n    const invalid =\n      currentStatus === IcInformationStatus.Error ? \"true\" : \"false\";\n    const disabledText = disabledMode && !readonly;\n\n    if (hiddenInput) {\n      renderHiddenInput(true, this.el, name, value, disabledMode);\n    }\n    return (\n      <Host class={{ [\"fullwidth\"]: fullWidth }}>\n        <ic-input-container readonly={readonly} disabled={disabledMode}>\n          {!this.hideLabel && (\n            <ic-input-label\n              for={inputId}\n              label={label}\n              helperText={helperText}\n              required={required}\n              disabled={disabledText}\n              readonly={readonly}\n            ></ic-input-label>\n          )}\n\n          <ic-input-component-container\n            small={small}\n            validationStatus={currentStatus}\n            multiLine={multiline}\n            disabled={disabledMode}\n            readonly={readonly}\n            validationInline={validationInline}\n            fullWidth={fullWidth}\n          >\n            {this.showLeftIcon && (\n              <span\n                class={{\n                  [\"readonly\"]: readonly,\n                  [\"has-value\"]: value.length > 0,\n                }}\n                slot=\"left-icon\"\n              >\n                <slot name=\"icon\" />\n              </span>\n            )}\n\n            {!multiline && (\n              <input\n                id={inputId}\n                name={name}\n                ref={(el) => (this.inputEl = el as HTMLInputElement)}\n                type={this.type}\n                min={min}\n                max={max}\n                value={value}\n                class={{\n                  [\"no-left-pad\"]: !this.showLeftIcon && readonly,\n                  [\"readonly\"]: readonly,\n                  [\"truncate-value\"]: truncateValue,\n                }}\n                placeholder={placeholderText}\n                required={required}\n                disabled={disabledMode}\n                readonly={readonly}\n                onInput={this.onInput}\n                onBlur={this.onBlur}\n                onFocus={this.onFocus}\n                aria-label={label}\n                aria-describedby={describedBy}\n                aria-invalid={invalid}\n                aria-activedescendant={this.ariaActiveDescendant}\n                aria-expanded={this.ariaExpanded}\n                aria-owns={this.ariaOwns}\n                autocomplete={this.autocomplete}\n                autocapitalize={this.autocapitalize}\n                autoFocus={this.autoFocus}\n                spellcheck={spellcheck}\n                inputmode={inputmode}\n                role={this.role}\n                {...this.inheritedAttributes}\n              ></input>\n            )}\n            {multiline && (\n              <textarea\n                id={inputId}\n                class={{\n                  [\"no-resize\"]: resize === false || readonly,\n                  [\"no-left-pad\"]: !this.showLeftIcon && readonly,\n                  [\"readonly\"]: readonly,\n                }}\n                name={name}\n                ref={(el) => (this.inputEl = el as HTMLTextAreaElement)}\n                value={value}\n                rows={rows}\n                required={required}\n                disabled={disabledMode}\n                placeholder={placeholderText}\n                readonly={readonly}\n                onInput={this.onInput}\n                onBlur={this.onBlur}\n                onFocus={this.onFocus}\n                aria-label={label}\n                aria-describedby={describedBy}\n                aria-invalid={invalid}\n                autocapitalize={this.autocapitalize}\n                autoFocus={this.autoFocus}\n                spellcheck={spellcheck}\n                inputmode={inputmode}\n                {...this.inheritedAttributes}\n              ></textarea>\n            )}\n            {isSlotUsed(this.el, \"clear-button\") && (\n              <slot name=\"clear-button\"></slot>\n            )}\n            {isSlotUsed(this.el, \"search-submit-button\") && (\n              <slot name=\"search-submit-button\"></slot>\n            )}\n          </ic-input-component-container>\n          {isSlotUsed(this.el, \"menu\") && <slot name=\"menu\"></slot>}\n          {(!isEmptyString(validationStatus) ||\n            !isEmptyString(validationText) ||\n            maxNumChars > 0 ||\n            maxValueExceeded ||\n            minValueUnattained) &&\n            !validationInlineInternal && (\n              <ic-input-validation\n                status={\n                  this.hasStatus(currentStatus) === false ||\n                  (currentStatus === IcInformationStatus.Success &&\n                    validationInline) ||\n                  validationInlineInternal\n                    ? \"\"\n                    : currentStatus\n                }\n                message={showStatusText ? currentValidationText : \"\"}\n                ariaLiveMode={messageAriaLive}\n                for={inputId}\n                fullWidth={fullWidth}\n              >\n                {!readonly && maxNumChars > 0 && (\n                  <div slot=\"validation-message-adornment\">\n                    <ic-typography\n                      variant=\"caption\"\n                      class={{\n                        [\"maxlengthtext\"]: true,\n                        [\"error\"]: maxLengthExceeded,\n                        [\"disabled\"]: disabledText,\n                      }}\n                    >\n                      <span\n                        aria-live=\"polite\"\n                        id={`${inputId}-charcount`}\n                        class=\"charcount\"\n                      >\n                        {numChars}/{maxNumChars}\n                      </span>\n                      <span hidden={true} id={hiddenCharCountDescId}>\n                        Field can contain a maximum of {maxNumChars} characters.\n                      </span>\n                    </ic-typography>\n                  </div>\n                )}\n              </ic-input-validation>\n            )}\n        </ic-input-container>\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  /**\n   * @prop --input-width: Width of the input field\n   */\n  display: block;\n}\n\n:host(.fullwidth) {\n  width: 100%;\n}\n\n::placeholder {\n  color: var(--ic-color-tertiary-text);\n  opacity: 1;\n}\n\ninput,\ntextarea {\n  border: 0;\n  border-radius: var(--ic-border-radius);\n  background-color: var(--ic-architectural-white);\n  line-height: 1.5rem;\n  letter-spacing: 0.005rem;\n  width: 100%;\n  padding-right: var(--ic-space-xs);\n  padding-left: var(--ic-space-xs);\n}\n\ntextarea {\n  min-height: var(--ic-space-lg);\n  resize: vertical;\n  padding-top: 0.375rem;\n}\n\ninput:focus,\ntextarea:focus {\n  border: 0;\n  outline: 0;\n}\n\ninput:disabled,\ntextarea:disabled {\n  color: var(--ic-architectural-200);\n}\n\ninput.readonly,\ntextarea.readonly {\n  color: var(--ic-color-primary-text);\n}\n\n/* Chrome, Safari, Edge */\ninput::-webkit-outer-spin-button,\ninput::-webkit-inner-spin-button {\n  -webkit-appearance: none;\n  margin: 0;\n}\n\n/* Firefox */\ninput[type=\"number\"] {\n  -moz-appearance: textfield;\n}\n\ntextarea.no-resize {\n  resize: none;\n}\n\n.maxlengthtext {\n  color: var(--ic-color-secondary-text);\n}\n\n.no-left-pad {\n  padding-left: 0;\n}\n\n::slotted([slot=\"icon\"]) {\n  fill: var(--ic-color-tertiary-text);\n}\n\n.has-value ::slotted([slot=\"icon\"]) {\n  fill: var(--ic-color-primary-text);\n}\n\n.charcount {\n  margin-right: calc(-1 * var(--ic-space-xxxs));\n}\n\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration,\ninput[type=\"search\"]::-webkit-search-results-button,\ninput[type=\"search\"]::-webkit-search-results-decoration {\n  display: none;\n}\n\ninput[type=\"search\"].truncate-value {\n  width: 100%;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n}\n\n@media (forced-colors: active) {\n  input.readonly,\n  textarea.readonly {\n    color: canvastext;\n  }\n\n  .has-value ::slotted([slot=\"icon\"]) {\n    fill: currentcolor;\n  }\n}\n"],"names":["inputIds","TextField","inheritedAttributes","showLeftIcon","this","hasLeftIconSlot","onInput","ev","_this","value","target","icInput","emit","onBlur","icBlur","onFocus","icFocus","isTextArea","rows","getInlineValidationText","getValidationText","validationText","hasStatus","status","disabled","showStatusText","IcInformationStatus","Success","validationInline","validationInlineInternal","handleFormReset","initialValue","undefined","inputId","icChange","debounceEvent","debounce","key","newValue","inputEl","numChars","length","type","Number","min","minValueUnattained","max","maxValueExceeded","maxLength","maxLengthExceeded","debounceChanged","removeFormResetListener","el","watchValueHandler","inheritAttributes","concat","_toConsumableArray","IC_INHERITED_ARIA","readonly","addFormResetListener","removeDisabledFalse","onComponentRequiredPropUndefined","prop","label","propName","icKeydown","event","_callee","_regeneratorRuntime","wrap","_context","prev","next","focus","stop","_setFocus","apply","arguments","querySelector","_class2","_class3","_class4","_class5","_this2","name","required","small","placeholder","helperText","resize","validationStatus","spellcheck","inputmode","fullWidth","truncateValue","hiddenInput","disabledMode","placeholderText","currentStatus","Error","currentValidationText","maxNumChars","messageAriaLive","multiline","hiddenCharCountDescId","describedBy","getInputDescribedByText","trim","invalid","disabledText","renderHiddenInput","h","Host","class","_defineProperty","hideLabel","for","multiLine","slot","Object","assign","id","ref","ariaActiveDescendant","ariaExpanded","ariaOwns","autocomplete","autocapitalize","autoFocus","role","isSlotUsed","isEmptyString","message","ariaLiveMode","variant","hidden","get"],"sourceRoot":""}