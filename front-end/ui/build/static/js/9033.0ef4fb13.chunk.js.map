{"version":3,"file":"static/js/9033.0ef4fb13.chunk.js","mappings":"wMAgCaA,G,QAAU,W,kGAGb,KAAAC,eAAiC,KA4JjC,KAAAC,kBAAoB,WAC1BC,EAAKF,eAAiB,IAAIG,gBAAe,WACvCD,EAAKE,kB,IAGPF,EAAKF,eAAeK,QAAQH,EAAKI,K,EA4B3B,KAAAC,cAAgB,SAACC,GACvB,OAAQA,EAAMC,KACZ,IAAK,YACL,IAAK,aACHP,EAAKQ,aACHR,EAAKS,oBAAoBT,EAAKU,eAAe,IAC7CC,QACFL,EAAMM,iBACN,MACF,IAAK,UACL,IAAK,YACHZ,EAAKQ,aACHR,EAAKS,oBAAoBT,EAAKU,eAAe,IAC7CC,QACFL,EAAMM,iB,EAIJ,KAAAH,oBAAsB,SAC5BI,EACAC,GAEA,IAAMC,EAAYf,EAAKQ,aAAaQ,OAAS,EAEzCH,EAAc,IAChBA,EAAc,GAGhB,IAAII,EAAWH,EAAaD,EAAc,EAAIA,EAAc,EAc5D,OAXII,EAAW,EACbA,EAAWF,EACFE,EAAWF,IACpBE,EAAW,GAITjB,EAAKQ,aAAaS,GAAUC,WAC9BD,EAAWjB,EAAKS,oBAAoBQ,EAAUH,IAGzCG,C,oBAnOuB,G,kFAGE,E,eAKN,E,uCAUC,E,oDAeQ,W,eAKT,E,YAKH,E,sBAI8B,G,oBAItB,E,wDAGjC,WACEE,KAAKC,mBAAqBD,KAAKE,W,GAChC,CAAAd,IAAA,uBAAAe,MAOD,WAC8B,OAAxBH,KAAKrB,gBACPqB,KAAKrB,eAAeyB,Y,GAEvB,CAAAhB,IAAA,oBAAAe,MAED,YACEE,EAAAA,EAAAA,GAAoBL,KAAKD,SAAUC,KAAKf,MAExCe,KAAKM,2BACLN,KAAKO,mBAAqBP,KAAKC,kB,GAChC,CAAAb,IAAA,mBAAAe,MAED,WAAgB,IAAAK,EAAA,KACdR,KAAKX,aAAeoB,MAAMC,KACxBV,KAAKf,KAAK0B,iBAAiB,oBAG7BX,KAAKX,aAAauB,SAAQ,SAACC,EAAaC,GACjCD,EAAYE,WACfF,EAAYE,SAAWP,EAAKQ,eAAiBH,EAAYV,OAE3DU,EAAYI,KAAOT,EAAKS,KACxBJ,EAAYK,WAAaV,EAAKW,MAC1BN,EAAYE,WACdP,EAAKjB,cAAgBuB,EACrBN,EAAKQ,aAAeH,EAAYV,M,IAGpCH,KAAKX,aAAa,GAAG+B,WAAWC,cAAc,SAASC,SACrDtB,KAAKT,cAAgB,GAAK,EAAI,EAGF,eAA5BS,KAAKC,yBACiBsB,IAAtBvB,KAAKX,eACJW,KAAKX,aAAaQ,OAAS,GACI,IAA7BG,KAAKX,aAAaQ,UAChB2B,EAAAA,EAAAA,GAAWxB,KAAKX,aAAa,GAAI,sBAChCmC,EAAAA,EAAAA,GAAWxB,KAAKX,aAAa,GAAI,wBAEvCW,KAAKO,mBAAqB,aAG5BkB,EAAAA,EAAAA,GAAoBzB,KAAKpB,oBAEzB8C,EAAAA,EAAAA,GACE,CACE,CAAEC,KAAM3B,KAAKmB,MAAOS,SAAU,SAC9B,CAAED,KAAM3B,KAAKiB,KAAMW,SAAU,SAE/B,c,GAEH,CAAAxC,IAAA,gBAAAe,MAGD,SAAchB,GAAsC,I,EAAA0C,EAAA,KAClD7B,KAAKgB,aAAe7B,EAAM2C,OAAO3B,MACjC,IAAM4B,EAAiB5C,EAAM6C,OAC7BhC,KAAKiC,SAASC,KAAK,CACjB/B,MAAOH,KAAKgB,aACZe,eAAgB,CACdI,MAAOJ,EACPK,eAA8D,QAA9CC,EAAc,OAAdN,QAAc,IAAdA,OAAc,EAAdA,EAAgBV,cAAc,wBAAgB,IAAAgB,OAAA,EAAAA,EAAElC,cAI1CoB,IAAtBvB,KAAKX,eACPW,KAAKX,aAAauB,SAAQ,SAACC,EAAaC,GACtCD,EAAYE,SAAWc,EAAKb,eAAiBH,EAAYV,MACrDU,EAAYE,WACdc,EAAKtC,cAAgBuB,E,IAGzBd,KAAKX,aAAa,GAAG+B,WAAWC,cAAc,SAASC,SACrDtB,KAAKT,cAAgB,GAAK,EAAI,E,GAEnC,CAAAH,IAAA,gBAAAe,MAGD,WACE,IAAM4B,EAAiB/B,KAAKX,aAAaiD,WACvC,SAACzB,GAAW,OAAKA,EAAYE,QAAQ,IAEnCgB,EAAiB,IACnB/B,KAAKX,aAAa,GAAG+B,WAAWC,cAAc,SAASC,SAAW,EAClEtB,KAAKT,cAAgBwC,E,GAExB,CAAA3C,IAAA,mBAAAe,MAUO,WACN,GAAgC,eAA5BH,KAAKC,mBAAqC,CAG5C,IAFA,IAAIsC,EAAa,EAERC,EAAI,EAAGA,EAAIxC,KAAKX,aAAaQ,OAAQ2C,IAC5CD,GAAcvC,KAAKX,aAAamD,GAAGC,YAC/BD,EAAIxC,KAAKX,aAAaQ,OAAS,IACjC0C,GAJmB,IASO,eAA5BvC,KAAKO,oBACLgC,EAAavC,KAAK0C,eAAeD,YAEjCzC,KAAKO,mBAAqB,WAEE,aAA5BP,KAAKO,oBACLgC,EAAavC,KAAK0C,eAAeD,cAEjCzC,KAAKO,mBAAqB,a,IAG/B,CAAAnB,IAAA,SAAAe,MA+CD,WAAM,IAAAwC,EAAA,KASJ,OARAC,EAAAA,EAAAA,IACE,EACA5C,KAAKf,KACLe,KAAKiB,KACLjB,KAAKgB,aACLhB,KAAKD,WAIL8C,EAAAA,EAAAA,GAACC,EAAAA,EAAI,CAACC,UAAW/C,KAAKd,cAAe8D,MAAO,CAAEC,MAAOjD,KAAKiD,SACxDJ,EAAAA,EAAAA,GAAA,OACEK,KAAK,aAAY,gBAAAC,OACFnD,KAAKmB,OAAKgC,OAAGnD,KAAKoD,SAAW,aAAe,MAEzDpD,KAAKqD,YACLR,EAAAA,EAAAA,GAAA,kBACEG,OAAKM,EAAAA,EAAAA,GAAA,MAAAH,OAAQnD,KAAKuD,mBAAqB,GACvCpC,MAAOnB,KAAKmB,MACZqC,WAAYxD,KAAKwD,WACjBJ,SAAUpD,KAAKoD,SACfrD,SAAUC,KAAKD,YAGnB8C,EAAAA,EAAAA,GAAA,OACEG,MAAO,CACL,2BAA2B,EAC3BS,WAAwC,eAA5BzD,KAAKO,oBAEnBmD,IAAK,SAACC,GAAE,OAAMhB,EAAKD,eAAiBiB,CAAE,IAEtCd,EAAAA,EAAAA,GAAA,gBAGHe,EAAAA,EAAAA,GAAoB5D,KAAKuD,iBAAkBvD,KAAKD,YAC/C8C,EAAAA,EAAAA,GAAA,uBACEgB,aAAa,SACbC,OAAQ9D,KAAKuD,iBACbQ,QAAS/D,KAAKgE,iB,GAKvB,CAAA5E,IAAA,OAAA6E,IAAA,W,8GAxRoB,I,QChCC,whG","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-radio-group/ic-radio-group.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-radio-group/ic-radio-group.css?tag=ic-radio-group&encapsulation=shadow"],"sourcesContent":["import {\n  Component,\n  Host,\n  h,\n  Prop,\n  State,\n  Listen,\n  Element,\n  Event,\n  EventEmitter,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  hasValidationStatus,\n  isSlotUsed,\n  onComponentRequiredPropUndefined,\n  removeDisabledFalse,\n  renderHiddenInput,\n  checkResizeObserver,\n} from \"../../utils/helpers\";\nimport {\n  IcInformationStatusOrEmpty,\n  IcOrientation,\n  IcValueEventDetail,\n} from \"../../utils/types\";\nimport { IcChangeEventDetail } from \"./ic-radio-group.types\";\n\n@Component({\n  tag: \"ic-radio-group\",\n  styleUrl: \"ic-radio-group.css\",\n  shadow: true,\n})\nexport class RadioGroup {\n  private radioContainer: HTMLDivElement;\n  private radioOptions: HTMLIcRadioOptionElement[];\n  private resizeObserver: ResizeObserver = null;\n\n  @Element() host: HTMLIcRadioGroupElement;\n\n  @State() checkedValue: string = \"\";\n  @State() currentOrientation: IcOrientation;\n  @State() initialOrientation: IcOrientation;\n  @State() selectedChild: number = -1;\n\n  /**\n   * If `true`, the disabled state will be set.\n   */\n  @Prop() disabled: boolean = false;\n\n  /**\n   * The helper text that will be displayed for additional field guidance.\n   */\n  @Prop() helperText: string;\n\n  /**\n   * If `true`, the label will be hidden and the required label value will be applied as an aria-label.\n   */\n  @Prop() hideLabel: boolean = false;\n\n  /**\n   * The label for the radio group to be displayed.\n   */\n  @Prop() label!: string;\n\n  /**\n   * The name for the radio group to differentiate from other groups.\n   */\n  @Prop() name!: string;\n\n  /**\n   * The orientation of the radio buttons in the radio group. If there are more than two radio buttons in a radio group or either of the radio buttons use the `additional-field` slot, then the orientation will always be vertical.\n   */\n  @Prop() orientation: IcOrientation = \"vertical\";\n\n  /**\n   * If `true`, the radio group will require a value.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * If `true`, the small styling will be applied to the radio group.\n   */\n  @Prop() small: boolean = false;\n  /**\n   * The validation status - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationStatus: IcInformationStatusOrEmpty = \"\";\n  /**\n   * The validation text - e.g. 'error' | 'warning' | 'success'.\n   */\n  @Prop() validationText: string = \"\";\n\n  @Watch(\"orientation\")\n  orientationChangeHandler(): void {\n    this.initialOrientation = this.orientation;\n  }\n\n  /**\n   * Emitted when a user selects a radio.\n   */\n  @Event() icChange: EventEmitter<IcChangeEventDetail>;\n\n  disconnectedCallback(): void {\n    if (this.resizeObserver !== null) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  componentWillLoad(): void {\n    removeDisabledFalse(this.disabled, this.host);\n\n    this.orientationChangeHandler();\n    this.currentOrientation = this.initialOrientation;\n  }\n\n  componentDidLoad(): void {\n    this.radioOptions = Array.from(\n      this.host.querySelectorAll(\"ic-radio-option\")\n    );\n\n    this.radioOptions.forEach((radioOption, index) => {\n      if (!radioOption.selected) {\n        radioOption.selected = this.checkedValue === radioOption.value;\n      }\n      radioOption.name = this.name;\n      radioOption.groupLabel = this.label;\n      if (radioOption.selected) {\n        this.selectedChild = index;\n        this.checkedValue = radioOption.value;\n      }\n    });\n    this.radioOptions[0].shadowRoot.querySelector(\"input\").tabIndex =\n      this.selectedChild > 0 ? -1 : 0;\n\n    if (\n      this.initialOrientation === \"horizontal\" &&\n      this.radioOptions !== undefined &&\n      (this.radioOptions.length > 2 ||\n        (this.radioOptions.length === 2 &&\n          (isSlotUsed(this.radioOptions[0], \"additional-field\") ||\n            isSlotUsed(this.radioOptions[1], \"additional-field\"))))\n    ) {\n      this.currentOrientation = \"vertical\";\n    }\n\n    checkResizeObserver(this.runResizeObserver);\n\n    onComponentRequiredPropUndefined(\n      [\n        { prop: this.label, propName: \"label\" },\n        { prop: this.name, propName: \"name\" },\n      ],\n      \"Radio Group\"\n    );\n  }\n\n  @Listen(\"icCheck\")\n  selectHandler(event: CustomEvent<IcValueEventDetail>): void {\n    this.checkedValue = event.detail.value;\n    const selectedOption = event.target as HTMLIcRadioOptionElement;\n    this.icChange.emit({\n      value: this.checkedValue,\n      selectedOption: {\n        radio: selectedOption,\n        textFieldValue: selectedOption?.querySelector(\"ic-text-field\")?.value,\n      },\n    });\n\n    if (this.radioOptions !== undefined) {\n      this.radioOptions.forEach((radioOption, index) => {\n        radioOption.selected = this.checkedValue === radioOption.value;\n        if (radioOption.selected) {\n          this.selectedChild = index;\n        }\n      });\n      this.radioOptions[0].shadowRoot.querySelector(\"input\").tabIndex =\n        this.selectedChild > 0 ? -1 : 0;\n    }\n  }\n\n  @Listen(\"icSelectedChange\")\n  changeHandler(): void {\n    const selectedOption = this.radioOptions.findIndex(\n      (radioOption) => radioOption.selected\n    );\n    if (selectedOption < 0) {\n      this.radioOptions[0].shadowRoot.querySelector(\"input\").tabIndex = 0;\n      this.selectedChild = selectedOption;\n    }\n  }\n\n  private runResizeObserver = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      this.checkOrientation();\n    });\n\n    this.resizeObserver.observe(this.host);\n  };\n\n  private checkOrientation() {\n    if (this.initialOrientation === \"horizontal\") {\n      let totalWidth = 0;\n      const radioOptionGap = 40;\n      for (let i = 0; i < this.radioOptions.length; i++) {\n        totalWidth += this.radioOptions[i].clientWidth;\n        if (i < this.radioOptions.length - 1) {\n          totalWidth += radioOptionGap;\n        }\n      }\n\n      if (\n        this.currentOrientation === \"horizontal\" &&\n        totalWidth > this.radioContainer.clientWidth\n      ) {\n        this.currentOrientation = \"vertical\";\n      } else if (\n        this.currentOrientation === \"vertical\" &&\n        totalWidth < this.radioContainer.clientWidth\n      ) {\n        this.currentOrientation = \"horizontal\";\n      }\n    }\n  }\n\n  private handleKeyDown = (event: KeyboardEvent): void => {\n    switch (event.key) {\n      case \"ArrowDown\":\n      case \"ArrowRight\":\n        this.radioOptions[\n          this.getNextItemToSelect(this.selectedChild, true)\n        ].click();\n        event.preventDefault();\n        break;\n      case \"ArrowUp\":\n      case \"ArrowLeft\":\n        this.radioOptions[\n          this.getNextItemToSelect(this.selectedChild, false)\n        ].click();\n        event.preventDefault();\n    }\n  };\n\n  private getNextItemToSelect = (\n    currentItem: number,\n    movingDown: boolean\n  ): number => {\n    const numRadios = this.radioOptions.length - 1;\n\n    if (currentItem < 1) {\n      currentItem = 0;\n    }\n\n    let nextItem = movingDown ? currentItem + 1 : currentItem - 1;\n\n    //check if wrap around necessary\n    if (nextItem < 0) {\n      nextItem = numRadios;\n    } else if (nextItem > numRadios) {\n      nextItem = 0;\n    }\n\n    //if next item is disabled then find next\n    if (this.radioOptions[nextItem].disabled) {\n      nextItem = this.getNextItemToSelect(nextItem, movingDown);\n    }\n\n    return nextItem;\n  };\n\n  render() {\n    renderHiddenInput(\n      true,\n      this.host,\n      this.name,\n      this.checkedValue,\n      this.disabled\n    );\n\n    return (\n      <Host onKeyDown={this.handleKeyDown} class={{ small: this.small }}>\n        <div\n          role=\"radiogroup\"\n          aria-label={`${this.label}${this.required ? \", required\" : \"\"}`}\n        >\n          {!this.hideLabel && (\n            <ic-input-label\n              class={{ [`${this.validationStatus}`]: true }}\n              label={this.label}\n              helperText={this.helperText}\n              required={this.required}\n              disabled={this.disabled}\n            ></ic-input-label>\n          )}\n          <div\n            class={{\n              \"radio-buttons-container\": true,\n              horizontal: this.currentOrientation === \"horizontal\",\n            }}\n            ref={(el) => (this.radioContainer = el)}\n          >\n            <slot></slot>\n          </div>\n        </div>\n        {hasValidationStatus(this.validationStatus, this.disabled) && (\n          <ic-input-validation\n            ariaLiveMode=\"polite\"\n            status={this.validationStatus}\n            message={this.validationText}\n          ></ic-input-validation>\n        )}\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  display: block;\n}\n\nic-input-label.error {\n  color: var(--ic-status-error);\n}\n\nic-input-validation {\n  margin-top: var(--ic-space-sm);\n}\n\n:host(.small) ic-input-validation {\n  margin-top: calc(var(--ic-space-sm) / 2);\n}\n\nic-input-label ic-typography {\n  margin-bottom: var(--ic-space-sm);\n}\n\n:host(.small) ic-input-label ic-typography {\n  margin-bottom: calc(var(--ic-space-sm) / 2);\n}\n\n:host .radio-buttons-container {\n  display: flex;\n  flex-direction: column;\n  gap: var(--ic-space-xxs);\n}\n\n:host(.small) .radio-buttons-container {\n  gap: var(--ic-space-xxxs);\n}\n\n:host .radio-buttons-container.horizontal {\n  display: flex;\n  flex-direction: row;\n  gap: calc(var(--ic-space-xl) + var(--ic-space-xs));\n}\n\n:host(.small) .radio-buttons-container.horizontal {\n  gap: var(--ic-space-xl);\n}\n"],"names":["RadioGroup","resizeObserver","runResizeObserver","_this","ResizeObserver","checkOrientation","observe","host","handleKeyDown","event","key","radioOptions","getNextItemToSelect","selectedChild","click","preventDefault","currentItem","movingDown","numRadios","length","nextItem","disabled","this","initialOrientation","orientation","value","disconnect","removeDisabledFalse","orientationChangeHandler","currentOrientation","_this2","Array","from","querySelectorAll","forEach","radioOption","index","selected","checkedValue","name","groupLabel","label","shadowRoot","querySelector","tabIndex","undefined","isSlotUsed","checkResizeObserver","onComponentRequiredPropUndefined","prop","propName","_this3","detail","selectedOption","target","icChange","emit","radio","textFieldValue","_a","findIndex","totalWidth","i","clientWidth","radioContainer","_this4","renderHiddenInput","h","Host","onKeyDown","class","small","role","concat","required","hideLabel","_defineProperty","validationStatus","helperText","horizontal","ref","el","hasValidationStatus","ariaLiveMode","status","message","validationText","get"],"sourceRoot":""}