{"version":3,"file":"static/js/8457.0a577db9.chunk.js","mappings":"qMAmBaA,G,QAAO,W,yDACV,KAAAC,iBAA2B,EAC3B,KAAAC,eAAiC,KAyCjC,KAAAC,kBAAoB,WAC1BC,EAAKF,eAAiB,IAAIG,gBAAe,WACvCD,EAAKE,iB,IAGPF,EAAKF,eAAeK,QAAQH,EAAKI,G,EAqB3B,KAAAC,YAAc,SAACC,GACrB,OAAIC,EAAAA,EAAAA,GAAWP,EAAKI,GAAI,UAEpBI,EAAAA,EAAAA,GAAA,OAAKC,MAAM,UACTD,EAAAA,EAAAA,GAAA,QAAME,KAAK,WAGNJ,GAEPE,EAAAA,EAAAA,GAAA,OAAKC,MAAM,UACTD,EAAAA,EAAAA,GAAA,iBACEG,QAA6B,OAApBX,EAAKY,WAAsB,QAAU,kBAE7CN,IAMF,I,kBAlFqBO,EAAAA,EAAaC,G,qDAWlB,E,qEAOzB,WAC8B,OAAxBC,KAAKjB,gBACPiB,KAAKjB,eAAekB,Y,GAEvB,CAAAC,IAAA,oBAAAC,MAED,WACEH,KAAKI,YAAaC,EAAAA,EAAAA,KAClBL,KAAKlB,iBAAkBwB,EAAAA,EAAAA,GAAeN,KAAKX,GAAI,iBAC/CW,KAAKb,iB,GACN,CAAAe,IAAA,mBAAAC,MAED,YACEI,EAAAA,EAAAA,GAAoBP,KAAKhB,mBACrBgB,KAAKlB,iBACPkB,KAAKQ,mB,GAER,CAAAN,IAAA,kBAAAC,MAUO,W,MACAM,EAAmD,QAAzCC,EAAAV,KAAKX,GAAGsB,WAAWC,cAAc,gBAAQ,IAAAF,OAAA,EAAAA,EAAEG,YACvDJ,IACEA,EAAU,GAAKX,EAAAA,EAAagB,EAC9Bd,KAAKH,WAAa,KACTY,EAAU,GAAKX,EAAAA,EAAaiB,EACrCf,KAAKH,WAAa,IAElBG,KAAKH,WAAa,K,GAGvB,CAAAK,IAAA,oBAAAC,MA6BO,WAAiB,IAAAa,EAAA,KACLhB,KAAKX,GAAGsB,WAAWM,iBACnC,4BAGQC,SAAQ,SAACC,GAAkB,OACnCA,EAAMC,aAAa,aAAc,OAASJ,EAAKzB,MAAQ,OAAO,G,GAEjE,CAAAW,IAAA,SAAAC,MAED,WAAM,IAAAkB,EACI9B,EAAwBS,KAAxBT,MAAOY,EAAiBH,KAAjBG,MAAOmB,EAAUtB,KAAVsB,MAEtB,OACE7B,EAAAA,EAAAA,GAAC8B,EAAAA,EAAI,CACH7B,OAAK2B,EAAA,IAAAG,EAAAA,EAAAA,GAAAH,EACF,QAAUC,IAAKE,EAAAA,EAAAA,GAAAH,EACf,oBAA0C,MAApBrB,KAAKH,aAAkB2B,EAAAA,EAAAA,GAAAH,EAC7C,gBAAsC,OAApBrB,KAAKH,YAAmBwB,GAE7CI,KAAK,aAELhC,EAAAA,EAAAA,GAAA,OAAKC,MAAM,SACTD,EAAAA,EAAAA,GAAA,OAAKC,MAAM,cACRM,KAAKV,YAAYC,IAClBE,EAAAA,EAAAA,GAAA,OAAKC,MAAM,UACTD,EAAAA,EAAAA,GAAA,QAAME,KAAK,UACTF,EAAAA,EAAAA,GAAA,iBAAeG,QAAQ,QAAQO,MAIpCH,KAAKlB,kBACJW,EAAAA,EAAAA,GAAA,OAAKC,MAAM,kBACTD,EAAAA,EAAAA,GAAA,OAAKgC,KAAK,SACRhC,EAAAA,EAAAA,GAAA,QAAME,KAAK,sBAKnBF,EAAAA,EAAAA,GAAA,OAAKC,MAAM,Y,GAGhB,CAAAQ,IAAA,KAAAwB,IAAA,W,0BArIiB,I,QCnBC,khH","sources":["../node_modules/@ukic/web-components/dist/esm/src/components/ic-data-row/ic-data-row.tsx","../node_modules/@ukic/web-components/dist/esm/src/components/ic-data-row/ic-data-row.css?tag=ic-data-row&encapsulation=shadow"],"sourcesContent":["import { Component, Element, Host, Prop, h, State } from \"@stencil/core\";\nimport {\n  checkResizeObserver,\n  DEVICE_SIZES,\n  getCurrentDeviceSize,\n  isSlotUsed,\n  slotHasContent,\n} from \"../../utils/helpers\";\n\n/**\n * @slot label - Content will be rendered in the leftmost cell.\n * @slot value - Content will be rendered to the right of the label.\n * @slot end-component - Content will be displayed in the rightmost cell.\n */\n@Component({\n  tag: \"ic-data-row\",\n  styleUrl: \"ic-data-row.css\",\n  shadow: true,\n})\nexport class DataRow {\n  private hasEndComponent: boolean = false;\n  private resizeObserver: ResizeObserver = null;\n\n  @Element() el: HTMLIcDataRowElement;\n\n  @State() deviceSize: number = DEVICE_SIZES.XL;\n  @State() entitySize: \"xl\" | \"m\" | \"xs\";\n\n  /**\n   * The label in the leftmost cell of the row.\n   */\n  @Prop() label: string;\n\n  /**\n   * If `true`, the small styling will be applied to the row. This is automatically applied if small is set on the parent data heading.\n   */\n  @Prop() small: boolean = false;\n\n  /**\n   * The value of the middle (right if no end-component supplied) cell of the row.\n   */\n  @Prop() value: string;\n\n  disconnectedCallback(): void {\n    if (this.resizeObserver !== null) {\n      this.resizeObserver.disconnect();\n    }\n  }\n\n  componentWillLoad(): void {\n    this.deviceSize = getCurrentDeviceSize();\n    this.hasEndComponent = slotHasContent(this.el, \"end-component\");\n    this.checkLabelAbove();\n  }\n\n  componentDidLoad(): void {\n    checkResizeObserver(this.runResizeObserver);\n    if (this.hasEndComponent) {\n      this.labelEndComponent();\n    }\n  }\n\n  private runResizeObserver = () => {\n    this.resizeObserver = new ResizeObserver(() => {\n      this.checkLabelAbove();\n    });\n\n    this.resizeObserver.observe(this.el);\n  };\n\n  private checkLabelAbove() {\n    const rowSize = this.el.shadowRoot.querySelector(\".data\")?.clientWidth;\n    if (rowSize) {\n      if (rowSize + 46 < DEVICE_SIZES.S) {\n        this.entitySize = \"xs\";\n      } else if (rowSize + 46 < DEVICE_SIZES.M) {\n        this.entitySize = \"m\";\n      } else {\n        this.entitySize = \"xl\";\n      }\n    }\n  }\n\n  /**\n   * Renders the label either as a ic-typography or slot. Slotted content takes precedence.\n   * @param label string - label of value\n   * @returns HTMLDivElement - returns label as slot or ic-typography with label as textContent\n   */\n  private renderLabel = (label: string) => {\n    if (isSlotUsed(this.el, \"label\")) {\n      return (\n        <div class=\"label\">\n          <slot name=\"label\"></slot>\n        </div>\n      );\n    } else if (label) {\n      return (\n        <div class=\"label\">\n          <ic-typography\n            variant={this.entitySize === \"xs\" ? \"label\" : \"subtitle-large\"}\n          >\n            {label}\n          </ic-typography>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  private labelEndComponent(): void {\n    const component = this.el.shadowRoot.querySelectorAll(\n      \"slot[name=end-component]\"\n    );\n\n    component.forEach((child: HTMLElement) =>\n      child.setAttribute(\"aria-label\", \"for \" + this.label + \" row\")\n    );\n  }\n\n  render() {\n    const { label, value, small } = this;\n\n    return (\n      <Host\n        class={{\n          [\"small\"]: small,\n          [\"breakpoint-medium\"]: this.entitySize === \"m\",\n          [\"breakpoint-xs\"]: this.entitySize === \"xs\",\n        }}\n        role=\"listitem\"\n      >\n        <div class=\"data\">\n          <div class=\"text-cells\">\n            {this.renderLabel(label)}\n            <div class=\"value\">\n              <slot name=\"value\">\n                <ic-typography variant=\"body\">{value}</ic-typography>\n              </slot>\n            </div>\n          </div>\n          {this.hasEndComponent && (\n            <div class=\"end-component\">\n              <div role=\"cell\">\n                <slot name=\"end-component\"></slot>\n              </div>\n            </div>\n          )}\n        </div>\n        <div class=\"divider\" />\n      </Host>\n    );\n  }\n}\n","@import \"../../global/normalize.css\";\n\n:host {\n  position: relative;\n  display: block;\n}\n\n.data {\n  display: flex;\n  align-items: center;\n}\n\n.text-cells {\n  display: flex;\n  flex-grow: 1;\n  min-width: 0;\n}\n\n.label {\n  width: 12.5rem;\n  min-width: 12.5rem;\n  margin-right: var(--ic-space-md);\n  color: var(--ic-color-tertiary-text);\n}\n\n.value {\n  flex-grow: 1;\n}\n\nslot[name=\"value\"]::slotted(ic-text-field[readonly][hide-label]) {\n  margin-top: calc(var(--ic-space-xs) * -1);\n}\n\nslot[name=\"value\"]::slotted(ic-text-field[small][readonly][hide-label]) {\n  margin-top: calc(var(--ic-space-xxs) * -1);\n}\n\nslot[name=\"value\"]::slotted(ic-text-field[readonly][hide-label][rows]) {\n  margin-top: calc(var(--ic-space-xxs) * -1 - var(--ic-space-xxxs));\n}\n\n.end-component {\n  width: fit-content;\n  margin-left: 3.5rem;\n}\n\n.divider {\n  margin-top: var(--ic-space-md);\n  height: var(--ic-space-1px);\n  background-color: var(--ic-architectural-300);\n}\n\n:host(.small) .divider {\n  margin-top: var(--ic-space-xs);\n}\n\n:host(.breakpoint-medium) .label {\n  width: 10rem;\n  min-width: 10rem;\n}\n\n:host(.breakpoint-xs) .text-cells {\n  flex-direction: column;\n}\n\n:host(.breakpoint-xs) .label {\n  width: 8rem;\n  margin-bottom: var(--ic-space-xs);\n}\n\n:host(.breakpoint-xs) .value {\n  max-width: 95%;\n}\n\n:host(.breakpoint-xs) .end-component {\n  margin-left: 0;\n}\n\n@media (forced-colors: active) {\n  .divider {\n    background-color: canvastext;\n  }\n}\n"],"names":["DataRow","hasEndComponent","resizeObserver","runResizeObserver","_this","ResizeObserver","checkLabelAbove","observe","el","renderLabel","label","isSlotUsed","h","class","name","variant","entitySize","DEVICE_SIZES","XL","this","disconnect","key","value","deviceSize","getCurrentDeviceSize","slotHasContent","checkResizeObserver","labelEndComponent","rowSize","_a","shadowRoot","querySelector","clientWidth","S","M","_this2","querySelectorAll","forEach","child","setAttribute","_class","small","Host","_defineProperty","role","get"],"sourceRoot":""}